<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum gkeys 
{
    left,
    right,
    cw,
    ccw,
    hd,
    sd,
    hold,
    length
};
enum mkeys
{
    up = gkeys.length + 1, 
    down,
    left,
    right,
    accept,
    back,
    menu,
    length
};
enum in_modes
{
    kb,
    gp,
    mouse
};


ini_open("settings.ini");
global.multi_input = ini_read_real("CONTROLS", "SIMULTANEOUS_MULTI_INPUT", false);

if(global.multi_input) { global.in_method = ds_map_create(); }
else { global.in_method = in_modes.kb; }
global.in_map = ds_map_create();
global.in = ds_map_create();
global.in_p = ds_map_create();

default_method_map = ds_map_create();
default_method_map[? gkeys.hold] = in_modes.kb;
default_method_map[? gkeys.left] = in_modes.kb;
default_method_map[? gkeys.right] = in_modes.kb;
default_method_map[? gkeys.cw] = in_modes.kb;
default_method_map[? gkeys.ccw] = in_modes.kb;
default_method_map[? gkeys.hd] = in_modes.kb;
default_method_map[? gkeys.sd] = in_modes.kb;

default_method_map[? mkeys.menu] = in_modes.kb;
default_method_map[? mkeys.left] = in_modes.kb;
default_method_map[? mkeys.right] = in_modes.kb;
default_method_map[? mkeys.up] = in_modes.kb;
default_method_map[? mkeys.down] = in_modes.kb;
default_method_map[? mkeys.accept] = in_modes.kb;
default_method_map[? mkeys.back] = in_modes.kb;


kb_default_map = ds_map_create();
kb_default_map[? gkeys.hold] = vk_shift;
kb_default_map[? gkeys.left] = vk_left;
kb_default_map[? gkeys.right] = vk_right;
kb_default_map[? gkeys.cw] = ord("S");
kb_default_map[? gkeys.ccw] = ord("A");
kb_default_map[? gkeys.hd] = vk_space;
kb_default_map[? gkeys.sd] = vk_down;

kb_default_map[? mkeys.menu] = vk_escape;
kb_default_map[? mkeys.left] = vk_left;
kb_default_map[? mkeys.right] = vk_right;
kb_default_map[? mkeys.up] = vk_up;
kb_default_map[? mkeys.down] = vk_down;
kb_default_map[? mkeys.accept] = vk_space;
kb_default_map[? mkeys.back] = ord("A");

gp_default_map = ds_map_create();
gp_default_map[? gkeys.hold] = gp_shoulderl;
gp_default_map[? gkeys.left] = gp_padl;
gp_default_map[? gkeys.right] = gp_padr;
gp_default_map[? gkeys.cw] = gp_face2;
gp_default_map[? gkeys.ccw] = gp_face1;
gp_default_map[? gkeys.hd] = gp_padu;
gp_default_map[? gkeys.sd] = gp_padd;

gp_default_map[? mkeys.menu] = gp_start;
gp_default_map[? mkeys.left] = gp_padl;
gp_default_map[? mkeys.right] = gp_padr;
gp_default_map[? mkeys.up] = gp_padu;
gp_default_map[? mkeys.down] = gp_padd;
gp_default_map[? mkeys.accept] = gp_face1;
gp_default_map[? mkeys.back] = gp_face2;

if(global.multi_input)
{
    
    global.in_method[? gkeys.hold] = ini_read_real("GAME_CONTROLS", "HOLD_METHOD", default_method_map[? gkeys.hold]);
    global.in_method[? gkeys.left] = ini_read_real("GAME_CONTROLS", "LEFT_METHOD", default_method_map[? gkeys.left]);
    global.in_method[? gkeys.right] = ini_read_real("GAME_CONTROLS", "RIGHT_METHOD", default_method_map[? gkeys.right]);
    global.in_method[? gkeys.cw] = ini_read_real("GAME_CONTROLS", "CW_METHOD", default_method_map[? gkeys.cw]);
    global.in_method[? gkeys.ccw] = ini_read_real("GAME_CONTROLS", "CCW_METHOD", default_method_map[? gkeys.ccw]);
    global.in_method[? gkeys.hd] = ini_read_real("GAME_CONTROLS", "HD_METHOD", default_method_map[? gkeys.hd]);
    global.in_method[? gkeys.sd] = ini_read_real("GAME_CONTROLS", "SD_METHOD", default_method_map[? gkeys.sd]);
    
    global.in_method[? mkeys.menu] = ini_read_real("MENU_CONTROLS", "MENU_METHOD", default_method_map[? mkeys.menu]);
    global.in_method[? mkeys.left] = ini_read_real("MENU_CONTROLS", "LEFT_METHOD", default_method_map[? mkeys.left]);
    global.in_method[? mkeys.right] = ini_read_real("MENU_CONTROLS", "RIGHT_METHOD", default_method_map[? mkeys.right]);
    global.in_method[? mkeys.up] = ini_read_real("MENU_CONTROLS", "UP_METHOD", default_method_map[? mkeys.up]);
    global.in_method[? mkeys.down] = ini_read_real("MENU_CONTROLS", "DOWN_METHOD", default_method_map[? mkeys.down]);
    global.in_method[? mkeys.accept] = ini_read_real("MENU_CONTROLS", "ACCEPT_METHOD", default_method_map[? mkeys.accept]);
    global.in_method[? mkeys.back] = ini_read_real("MENU_CONTROLS", "BACK_METHOD", default_method_map[? mkeys.back]);


    global.in_map[? gkeys.hold] = ini_read_real("GAME_CONTROLS", "HOLD", kb_default_map[? gkeys.hold]);
    global.in_map[? gkeys.left] = ini_read_real("GAME_CONTROLS", "LEFT", kb_default_map[? gkeys.left]);
    global.in_map[? gkeys.right] = ini_read_real("GAME_CONTROLS", "RIGHT", kb_default_map[? gkeys.right]);
    global.in_map[? gkeys.cw] = ini_read_real("GAME_CONTROLS", "CW", kb_default_map[? gkeys.cw]);
    global.in_map[? gkeys.ccw] = ini_read_real("GAME_CONTROLS", "CCW", kb_default_map[? gkeys.ccw]);
    global.in_map[? gkeys.hd] = ini_read_real("GAME_CONTROLS", "HD", kb_default_map[? gkeys.hd]);
    global.in_map[? gkeys.sd] = ini_read_real("GAME_CONTROLS", "SD", kb_default_map[? gkeys.sd]);
    
    global.in_map[? mkeys.menu] = ini_read_real("MENU_CONTROLS", "MENU", kb_default_map[? mkeys.menu]);
    global.in_map[? mkeys.left] = ini_read_real("MENU_CONTROLS", "LEFT", kb_default_map[? mkeys.left]);
    global.in_map[? mkeys.right] = ini_read_real("MENU_CONTROLS", "RIGHT", kb_default_map[? mkeys.right]);
    global.in_map[? mkeys.up] = ini_read_real("MENU_CONTROLS", "UP", kb_default_map[? mkeys.up]);
    global.in_map[? mkeys.down] = ini_read_real("MENU_CONTROLS", "DOWN", kb_default_map[? mkeys.down]);
    global.in_map[? mkeys.accept] = ini_read_real("MENU_CONTROLS", "ACCEPT", kb_default_map[? mkeys.accept]);
    global.in_map[? mkeys.back] = ini_read_real("MENU_CONTROLS", "BACK", kb_default_map[? mkeys.back]);
}
else
{
    if(global.in_method == in_modes.kb)
    {
        global.in_map[? gkeys.hold] = ini_read_real("GAME_CONTROLS", "HOLD", kb_default_map[? gkeys.hold]);
        global.in_map[? gkeys.left] = ini_read_real("GAME_CONTROLS", "LEFT", kb_default_map[? gkeys.left]);
        global.in_map[? gkeys.right] = ini_read_real("GAME_CONTROLS", "RIGHT", kb_default_map[? gkeys.right]);
        global.in_map[? gkeys.cw] = ini_read_real("GAME_CONTROLS", "CW", kb_default_map[? gkeys.cw]);
        global.in_map[? gkeys.ccw] = ini_read_real("GAME_CONTROLS", "CCW", kb_default_map[? gkeys.ccw]);
        global.in_map[? gkeys.hd] = ini_read_real("GAME_CONTROLS", "HD", kb_default_map[? gkeys.hd]);
        global.in_map[? gkeys.sd] = ini_read_real("GAME_CONTROLS", "SD", kb_default_map[? gkeys.sd]);
        
        global.in_map[? mkeys.menu] = ini_read_real("MENU_CONTROLS", "MENU", kb_default_map[? mkeys.menu]);
        global.in_map[? mkeys.left] = ini_read_real("MENU_CONTROLS", "LEFT", kb_default_map[? mkeys.left]);
        global.in_map[? mkeys.right] = ini_read_real("MENU_CONTROLS", "RIGHT", kb_default_map[? mkeys.right]);
        global.in_map[? mkeys.up] = ini_read_real("MENU_CONTROLS", "UP", kb_default_map[? mkeys.up]);
        global.in_map[? mkeys.down] = ini_read_real("MENU_CONTROLS", "DOWN", kb_default_map[? mkeys.down]);
        global.in_map[? mkeys.accept] = ini_read_real("MENU_CONTROLS", "ACCEPT", kb_default_map[? mkeys.accept]);
        global.in_map[? mkeys.back] = ini_read_real("MENU_CONTROLS", "BACK", kb_default_map[? mkeys.back]);
    }
    else if(global.in_method == in_modes.gp)
    {
        global.in_map[? gkeys.hold] = ini_read_real("GAME_CONTROLS", "HOLD", gp_default_map[? gkeys.hold]);
        global.in_map[? gkeys.left] = ini_read_real("GAME_CONTROLS", "LEFT", gp_default_map[? gkeys.left]);
        global.in_map[? gkeys.right] = ini_read_real("GAME_CONTROLS", "RIGHT", gp_default_map[? gkeys.right]);
        global.in_map[? gkeys.cw] = ini_read_real("GAME_CONTROLS", "CW", gp_default_map[? gkeys.cw]);
        global.in_map[? gkeys.ccw] = ini_read_real("GAME_CONTROLS", "CCW", gp_default_map[? gkeys.ccw]);
        global.in_map[? gkeys.hd] = ini_read_real("GAME_CONTROLS", "HD", gp_default_map[? gkeys.hd]);
        global.in_map[? gkeys.sd] = ini_read_real("GAME_CONTROLS", "SD", gp_default_map[? gkeys.sd]);
        
        global.in_map[? mkeys.menu] = ini_read_real("MENU_CONTROLS", "MENU", gp_default_map[? mkeys.menu]);
        global.in_map[? mkeys.left] = ini_read_real("MENU_CONTROLS", "LEFT", gp_default_map[? mkeys.left]);
        global.in_map[? mkeys.right] = ini_read_real("MENU_CONTROLS", "RIGHT", gp_default_map[? mkeys.right]);
        global.in_map[? mkeys.up] = ini_read_real("MENU_CONTROLS", "UP", gp_default_map[? mkeys.up]);
        global.in_map[? mkeys.down] = ini_read_real("MENU_CONTROLS", "DOWN", gp_default_map[? mkeys.down]);
        global.in_map[? mkeys.accept] = ini_read_real("MENU_CONTROLS", "ACCEPT", gp_default_map[? mkeys.accept]);
        global.in_map[? mkeys.back] = ini_read_real("MENU_CONTROLS", "BACK", gp_default_map[? mkeys.back]);
    }
}


ini_close();

global.pads = noone;
gp_check();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.multi_input)
{
    var dev = global.in_method;
    if(dev == in_modes.kb) 
    {
        for (var i = 0; i &lt; mkeys.length; i++)
        {
            if(i == gkeys.length) { i++; }
            
            global.in[? i] = keyboard_check(global.in_map[? i]); 
            global.in_p[? i] = keyboard_check_pressed(global.in_map[? i]);
        }
    }
    else if(dev == in_modes.mouse) 
    {
        for (var i = 0; i &lt; mkeys.length; i++)
        {
            if(i == gkeys.length) { i++; }
            
            global.in[? i] = mouse_check_button(global.in_map[? i]); 
            global.in_p[? i] = mouse_check_button_pressed(global.in_map[? i]);
        }
    }
    else if(floor(dev) == in_modes.gp) 
    {
        var slot = (dev - in_modes.gp)*100;
        if( !is_undefined(ds_list_find_value(global.pads, slot)) )
        {
            for (var i = 0; i &lt; mkeys.length; i++)
            {
                if(i == gkeys.length) { i++; }
            
                if(slot == floor(slot)) //Not an axis
                {
                    global.in[? i] = gamepad_button_check(slot, global.in_map[? i]); 
                    global.in_p[? i] = gamepad_button_check_pressed(slot, global.in_map[? i]);
                }
                else
                {
                    var dir = (slot - floor(slot))*10;
                    var val = gamepad_axis_value(slot, global.in_map[? i]); 
                    if(dir == 3 and val &gt; 0 ) //+ axis
                    {
                        global.in[? i] = true;
                        global.in_p[? i] = true;
                    }
                    else if(dir == 1 and val &lt; 0) //- axis
                    {
                        global.in[? i] = true;
                        global.in_p[? i] = true;
                    }
                }
            }
        }
    }
}
else
{
    for (var i = 0; i &lt; mkeys.length; i++)
    {
        if(global.in_method[? i] == in_modes.kb) 
        { 
            global.in[? i] = keyboard_check(global.in_map[? i]); 
            global.in_p[? i] = keyboard_check_pressed(global.in_map[? i]);
        }
        else if(global.in_method[? i] == in_modes.mouse) 
        { 
            global.in[? i] = mouse_check_button(global.in_map[? i]); 
            global.in_p[? i] = mouse_check_button_pressed(global.in_map[? i]);
        }
        else if(!is_undefined(global.in_method[? i]) and floor(global.in_method[? i]) == in_modes.gp)
        {
            var slot = (global.in_method[? i] - in_modes.gp)*100;
            if( !is_undefined(ds_list_find_value(global.pads, slot)) )
            {
                if(slot == floor(slot)) //Not an axis
                {
                    global.in[? i] = gamepad_button_check(slot, global.in_map[? i]); 
                    global.in_p[? i] = gamepad_button_check_pressed(slot, global.in_map[? i]);
                }
                else
                {
                    var dir = (slot - floor(slot))*10;
                    var val = gamepad_axis_value(slot, global.in_map[? i]); 
                    if(dir == 3 and val &gt; 0 ) //+ axis
                    {
                        global.in[? i] = true;
                        global.in_p[? i] = true;
                    }
                    else if(dir == 1 and val &lt; 0) //- axis
                    {
                        global.in[? i] = true;
                        global.in_p[? i] = true;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset to default
if(global.multi_input)
{
    global.in_method[? gkeys.hold] = default_method_map[? gkeys.hold];
    global.in_method[? gkeys.left] = default_method_map[? gkeys.left];
    global.in_method[? gkeys.right] = default_method_map[? gkeys.right];
    global.in_method[? gkeys.cw] = default_method_map[? gkeys.cw];
    global.in_method[? gkeys.ccw] = default_method_map[? gkeys.ccw];
    global.in_method[? gkeys.hd] = default_method_map[? gkeys.hd];
    global.in_method[? gkeys.sd] = default_method_map[? gkeys.sd];
    
    global.in_method[? mkeys.menu] = default_method_map[? mkeys.menu];
    global.in_method[? mkeys.left] = default_method_map[? mkeys.left];
    global.in_method[? mkeys.right] = default_method_map[? mkeys.right];
    global.in_method[? mkeys.up] = default_method_map[? mkeys.up];
    global.in_method[? mkeys.down] = default_method_map[? mkeys.down];
    global.in_method[? mkeys.accept] = default_method_map[? mkeys.accept];
    global.in_method[? mkeys.back] = default_method_map[? mkeys.back];
    
    
    global.in_map[? gkeys.hold] = kb_default_map[? gkeys.hold];
    global.in_map[? gkeys.left] = kb_default_map[? gkeys.left];
    global.in_map[? gkeys.right] = kb_default_map[? gkeys.right];
    global.in_map[? gkeys.cw] = kb_default_map[? gkeys.cw];
    global.in_map[? gkeys.ccw] = kb_default_map[? gkeys.ccw];
    global.in_map[? gkeys.hd] = kb_default_map[? gkeys.hd];
    global.in_map[? gkeys.sd] = kb_default_map[? gkeys.sd];
    
    global.in_map[? mkeys.menu] = kb_default_map[? mkeys.menu];
    global.in_map[? mkeys.left] = kb_default_map[? mkeys.left];
    global.in_map[? mkeys.right] = kb_default_map[? mkeys.right];
    global.in_map[? mkeys.up] = kb_default_map[? mkeys.up];
    global.in_map[? mkeys.down] = kb_default_map[? mkeys.down];
    global.in_map[? mkeys.accept] = kb_default_map[? mkeys.accept];
    global.in_map[? mkeys.back] = kb_default_map[? mkeys.back];
}
else 
{ 
    global.in_method = in_modes.kb; 

    if(global.in_method == in_modes.kb)
    {  
        global.in_map[? gkeys.hold] = kb_default_map[? gkeys.hold];
        global.in_map[? gkeys.left] = kb_default_map[? gkeys.left];
        global.in_map[? gkeys.right] = kb_default_map[? gkeys.right];
        global.in_map[? gkeys.cw] = kb_default_map[? gkeys.cw];
        global.in_map[? gkeys.ccw] = kb_default_map[? gkeys.ccw];
        global.in_map[? gkeys.hd] = kb_default_map[? gkeys.hd];
        global.in_map[? gkeys.sd] = kb_default_map[? gkeys.sd];
        
        global.in_map[? mkeys.menu] = kb_default_map[? mkeys.menu];
        global.in_map[? mkeys.left] = kb_default_map[? mkeys.left];
        global.in_map[? mkeys.right] = kb_default_map[? mkeys.right];
        global.in_map[? mkeys.up] = kb_default_map[? mkeys.up];
        global.in_map[? mkeys.down] = kb_default_map[? mkeys.down];
        global.in_map[? mkeys.accept] = kb_default_map[? mkeys.accept];
        global.in_map[? mkeys.back] = kb_default_map[? mkeys.back];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
