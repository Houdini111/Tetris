<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.in_map = ds_map_create();
global.in_method = ds_map_create();
global.in = ds_map_create();
global.in_p = ds_map_create();
enum gkeys 
{
    hold,
    left,
    right,
    cw,
    ccw,
    hd,
    sd,
    length
};
enum mkeys
{
    up = gkeys.length + 1, 
    down,
    left,
    right,
    accept,
    back,
    menu,
    length
};
enum in_modes
{
    kb,
    gp,
    mouse
};


var default_map = ds_map_create();
var default_method = ds_map_create();

default_map[? gkeys.hold] = vk_shift;
default_method[? gkeys.hold] = in_modes.kb;
default_map[? gkeys.left] = vk_left;
default_method[? gkeys.left] = in_modes.kb;
default_map[? gkeys.right] = vk_right;
default_method[? gkeys.right] = in_modes.kb;
default_map[? gkeys.cw] = ord("S");
default_method[? gkeys.cw] = in_modes.kb;
default_map[? gkeys.ccw] = ord("A");
default_method[? gkeys.ccw] = in_modes.kb;
default_map[? gkeys.hd] = vk_space;
default_method[? gkeys.hd] = in_modes.kb;
default_map[? gkeys.sd] = vk_down;
default_method[? gkeys.sd] = in_modes.kb;

default_map[? mkeys.menu] = vk_escape;
default_method[? mkeys.menu] = in_modes.kb;
default_map[? mkeys.left] = vk_left;
default_method[? mkeys.left] = in_modes.kb;
default_map[? mkeys.right] = vk_right;
default_method[? mkeys.right] = in_modes.kb;
default_map[? mkeys.up] = vk_up;
default_method[? mkeys.up] = in_modes.kb;
default_map[? mkeys.down] = vk_down;
default_method[? mkeys.down] = in_modes.kb;
default_map[? mkeys.accept] = vk_space;
default_method[? mkeys.accept] = in_modes.kb;
default_map[? mkeys.back] = ord("A");
default_method[? mkeys.back] = in_modes.kb;

ini_open("settings.ini");
global.in_map[? gkeys.hold] = ini_read_real("GAME_CONTROLS", "HOLD", default_map[? gkeys.hold]);
global.in_method[? gkeys.hold] = ini_read_real("GAME_CONTROLS", "HOLD_METHOD", default_method[? gkeys.hold]);
global.in_map[? gkeys.left] = ini_read_real("GAME_CONTROLS", "LEFT", default_map[? gkeys.left]);
global.in_method[? gkeys.left] = ini_read_real("GAME_CONTROLS", "LEFT_METHOD", default_method[? gkeys.left]);
global.in_map[? gkeys.right] = ini_read_real("GAME_CONTROLS", "RIGHT", default_map[? gkeys.right]);
global.in_method[? gkeys.right] = ini_read_real("GAME_CONTROLS", "RIGHT_METHOD", default_method[? gkeys.right]);
global.in_map[? gkeys.cw] = ini_read_real("GAME_CONTROLS", "CW", default_map[? gkeys.cw]);
global.in_method[? gkeys.cw] = ini_read_real("GAME_CONTROLS", "CW_METHOD", default_method[? gkeys.cw]);
global.in_map[? gkeys.ccw] = ini_read_real("GAME_CONTROLS", "CCW", default_map[? gkeys.ccw]);
global.in_method[? gkeys.ccw] = ini_read_real("GAME_CONTROLS", "CCW_METHOD", default_method[? gkeys.ccw]);
global.in_map[? gkeys.hd] = ini_read_real("GAME_CONTROLS", "HD", default_map[? gkeys.hd]);
global.in_method[? gkeys.hd] = ini_read_real("GAME_CONTROLS", "HD_METHOD", default_method[? gkeys.hd]);
global.in_map[? gkeys.sd] = ini_read_real("GAME_CONTROLS", "SD", default_map[? gkeys.sd]);
global.in_method[? gkeys.sd] = ini_read_real("GAME_CONTROLS", "SD_METHOD", default_method[? gkeys.sd]);

global.in_map[? mkeys.menu] = ini_read_real("MENU_CONTROLS", "MENU", default_map[? mkeys.menu]);
global.in_method[? mkeys.menu] = ini_read_real("MENU_CONTROLS", "MENU_METHOD", default_method[? mkeys.menu]);
global.in_map[? mkeys.left] = ini_read_real("MENU_CONTROLS", "LEFT", default_map[? mkeys.left]);
global.in_method[? mkeys.left] = ini_read_real("MENU_CONTROLS", "LEFT_METHOD", default_method[? mkeys.left]);
global.in_map[? mkeys.right] = ini_read_real("MENU_CONTROLS", "RIGHT", default_map[? mkeys.right]);
global.in_method[? mkeys.right] = ini_read_real("MENU_CONTROLS", "RIGHT_METHOD", default_method[? mkeys.right]);
global.in_map[? mkeys.up] = ini_read_real("MENU_CONTROLS", "UP", default_map[? mkeys.up]);
global.in_method[? mkeys.up] = ini_read_real("MENU_CONTROLS", "UP_METHOD", default_method[? mkeys.up]);
global.in_map[? mkeys.down] = ini_read_real("MENU_CONTROLS", "DOWN", default_map[? mkeys.down]);
global.in_method[? mkeys.down] = ini_read_real("MENU_CONTROLS", "DOWN_METHOD", default_method[? mkeys.down]);
global.in_map[? mkeys.accept] = ini_read_real("MENU_CONTROLS", "ACCEPT", default_map[? mkeys.accept]);
global.in_method[? mkeys.accept] = ini_read_real("MENU_CONTROLS", "ACCEPT_METHOD", default_method[? mkeys.accept]);
global.in_map[? mkeys.back] = ini_read_real("MENU_CONTROLS", "BACK", default_map[? mkeys.back]);
global.in_method[? mkeys.back] = ini_read_real("MENU_CONTROLS", "BACK_METHOD", default_method[? mkeys.back]);
ini_close();

ds_map_destroy(default_map);
ds_map_destroy(default_method);

global.pads = noone;
gp_check();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; mkeys.length; i++)
{
    if(global.in_method[? i] == in_modes.kb) 
    { 
        global.in[? i] = keyboard_check(global.in_map[? i]); 
        global.in_p[? i] = keyboard_check_pressed(global.in_map[? i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
