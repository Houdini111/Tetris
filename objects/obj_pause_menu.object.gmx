<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_menu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

views = ds_map_create();
views[? "main_x"] = 0;
views[? "main_y"] = 0;
views[? "options_x"] = w;
views[? "options_y"] = 0;
views[? "controls_x"] = w*2;
views[? "controls_y"] = 0;
views[? "display_x"] = w;
views[? "display_y"] = -h;


area = "main";

selection = 0;


main = ds_list_create();
ds_list_add(main, my_large_font);
ds_list_add(main, "Continue");
ds_list_add(main, "Options");
ds_list_add(main, "Main Menu");
ds_list_add(main, "Exit Game");
sections[? "main"] = main;


options = ds_list_create();
ds_list_add(options, my_large_font);
ds_list_add(options, "Go Back");
ds_list_add(options, "Debug UI");
ds_list_add(options, "Grid");
ds_list_add(options, "Ghost");
ds_list_add(options, "Controls");
ds_list_add(options, "Display");
sections[? "options"] = options;


controls = ds_list_create();
ds_list_add(controls, my_large_font);
ds_list_add(controls, "Go Back");
ds_list_add(controls, "Left");
ds_list_add(controls, "Right");
ds_list_add(controls, "CW");
ds_list_add(controls, "CCW");
ds_list_add(controls, "Hard");
ds_list_add(controls, "Soft");
ds_list_add(controls, "Hold");
ds_list_add(controls, "Pause");
sections[? "controls"] = controls;

CONTROL_PAGE_NUMBER = 5;
controls_surface = generate_controls_surface();


display = ds_list_create();
ds_list_add(display, "WINDOW");
sections[? "display"] = controls;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if( x == goal_x and y == goal_y) 
{
    if(area == "main")
    {
        if(keyboard_check_pressed(vk_up)) { selection--; } 
        else if(keyboard_check_pressed(vk_down)) { selection++; }
        selection = clamp(selection, 0, ds_list_size(main)-1);
        
        if(keyboard_check_pressed(vk_space))
        {
            if(selection == 0) { keyboard_key_press(vk_escape); } //Resume
            else if(selection == 1)  //Options
            { 
                selection = 0 ;
                area = "options"; 
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 2) { room_goto(rm_main_menu); } //Main Menu
            else if(selection == 3) { game_end(); } //Exit Game
        }
    }
    else if(area == "options")
    {
        if(keyboard_check_pressed(vk_up)) { selection--; } 
        else if(keyboard_check_pressed(vk_down)) { selection++; }
        selection = clamp(selection, 0, ds_list_size(options)-2); //-2 beccause 0 stores font and because it's zero indexed
        
        if(keyboard_check_pressed(vk_space))
        {
            if(selection == 0) //Go Back
            {
                area = "main";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 1)  //Debug overlay
            {
                global.debug_overlay = !global.debug_overlay; 
                show_debug_overlay(global.debug_overlay); 
            } 
            else if(selection == 2){ global.grid = !global.grid; } //Grid 
            else if(selection == 3) //Ghost
            { 
                global.ghost = !global.ghost;
                //with(obj_ghostSeg) { visible = global.ghost; }
            } 
            else if(selection == 4) //Controls
            {
                area = "controls";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 6) //Display 
            {
                area = "display";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }  
        }
    }
    else if(area == "controls")
    {
        if(keyboard_check_pressed(vk_up)) { selection--; } 
        else if(keyboard_check_pressed(vk_down)) { selection++; }
        selection = clamp(selection, 0, ds_list_size(controls)-2);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_gray);
draw_set_alpha(0.7);
draw_rectangle(0, 0, w, h, false);
draw_set_alpha(1);

draw_set_color(c_black);
draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_set_font(my_huge_font);
draw_text(w/2, string_height("PAUSED")*0.25, "PAUSED");
draw_set_font(my_font);



//MAIN PAUSE MENU

draw_set_valign(fa_middle);

if(goal_x == x and goal_y = y)
{
    draw_set_color(c_teal);
    draw_set_font( ds_list_find_value( sections[? area], 0) );
    var start_height = 0
    if(area == "main") { start_height = h/2; }
    else if(area == "options") { start_height = h/3; }
    else if(area == "controls") { start_height = h/3; }
    else if(area == "display") { start_height = h/3; }
    draw_rectangle( (w*PADDING/2), ((start_height)-(box_large_height/2)+(large_height*selection)), (w-(w*PADDING/2)), ((start_height)+(box_large_height/2)+(large_height*selection)), false);
}


draw_set_color(c_black);

draw_set_font(main[|0]);
for(i = 0; i &lt; ds_list_size(main)-1; i++)
{
    draw_text(w/2-x, h/2+large_height*i-y, main[|i+1]);
}


//OPTIONS
draw_set_font(my_huge_font);
draw_text(w/2+w-x, string_height("OPTIONS")*1.5*(1+PADDING), "OPTIONS");
draw_set_font(options[|0]);
draw_set_halign(fa_left);
for(i = 0; i &lt; ds_list_size(options)-1; i++)
{
    draw_text(w*PADDING/2+w-x, h/3+large_height*i-y, options[|i+1]);
    draw_set_halign(fa_right);
    if(i == 1) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.debug_overlay, "oo")); }
    else if(i == 2) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.grid, "oo")); }
    else if(i == 3) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.ghost, "oo")); }
    else if(i == 4) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, "&gt;"); }
    draw_set_halign(fa_left);
}


//CONTROLS
draw_set_font(my_huge_font);
draw_set_halign(fa_center);
draw_text(w/2+w*2-x, string_height("CONTROLS")*1.5*(1+PADDING), "CONTROLS");
draw_set_font(controls[|0]);
draw_set_halign(fa_left);
for(i = 0; i &lt; ds_list_size(controls)-1; i++)
{
    draw_text(w*PADDING/2+w*2-x, h/3+large_height*i-y, controls[|i+1]);
    draw_set_halign(fa_right);
    if(i == 1) { draw_text(3*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.debug_overlay, "oo")); }
    else if(i == 2) { draw_text(3*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.grid, "oo")); }
    else if(i == 3) { draw_text(3*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.ghost, "oo")); }
    else if(i == 4) { draw_text(3*w-x-w*PADDING/2, h/3+large_height*i-y, global.rand_method); }
    else if(i == 5) { draw_text(3*w-x-w*PADDING/2, h/3+large_height*i-y, "&gt;"); }
    draw_set_halign(fa_left);
}
    


draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_font(my_font);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
