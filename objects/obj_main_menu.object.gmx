<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

views = ds_map_create();
views[? "main_x"] = 0;
views[? "main_y"] = 0;
views[? "options_x"] = w;
views[? "options_y"] = 0;
views[? "controls_x"] = w*2;
views[? "controls_y"] = 0;
views[? "display_x"] = w;
views[? "display_y"] = -h;
views[? "sound_x"] = w;
views[? "sound_y"] = h;


area = "main";
last_area = area;

selection = 0;


main = ds_list_create();
ds_list_add(main, my_large_font);
ds_list_add(main, "New Game");
ds_list_add(main, "Options");
ds_list_add(main, "Exit");
sections[? "main"] = main;


options = ds_list_create();
ds_list_add(options, my_large_font);
ds_list_add(options, "&lt;");
ds_list_add(options, "Grid");
ds_list_add(options, "Ghost");
ds_list_add(options, "Random");
ds_list_add(options, "Controls");
ds_list_add(options, "Display");
ds_list_add(options, "Sound");
sections[? "options"] = options;


controls = ds_list_create();
ds_list_add(controls, my_large_font);
ds_list_add(controls, "&lt;");
ds_list_add(controls, "Left");
ds_list_add(controls, "Right");
ds_list_add(controls, "CW");
ds_list_add(controls, "CCW");
ds_list_add(controls, "Hard");
ds_list_add(controls, "Soft");
ds_list_add(controls, "Hold");
ds_list_add(controls, "Pause");
sections[? "controls"] = controls;

CONTROL_PAGE_NUMBER = 5;
controls_surface = generate_controls_surface();


display = ds_list_create();
ds_list_add(display, my_large_font);
ds_list_add(display, "Go Back");
ds_list_add(display, "RES.");
ds_list_add(display, "MAX FPS");
ds_list_add(display, "Debug UI");
sections[? "display"] = controls;


sound = ds_list_create();
ds_list_add(sound, my_large_font);
ds_list_add(sound, "Go Back");
ds_list_add(sound, "MUSIC");
ds_list_add(sound, "SFX");
sections[? "sound"] = controls;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(views);
ds_list_destroy(main);
ds_list_destroy(options);
ds_list_destroy(controls);
ds_list_destroy(display);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if( abs(x - goal_x) &lt; tolerance and abs(y - goal_y) &lt; tolerance ) 
{
    if(global.in_p[? mkeys.up]) { selection--; } 
    else if(global.in_p[? mkeys.down]) { selection++; }
    /*
    if(keyboard_check_pressed(vk_up)) { selection--; } 
    else if(keyboard_check_pressed(vk_down)) { selection++; }
    */
    
    if(area == "main")
    {
        selection = clamp(selection, 0, ds_list_size(main)-2); //-2 beccause 0 stores font and because it's zero indexed
        
        //if(keyboard_check_pressed(vk_space))
        if(global.in_p[? mkeys.accept])
        {
            if(selection == 0) { room_goto(game_board) } //Start Game 
            else if(selection == 1)  //Options
            { 
                selection = 0 ;
                last_area = area;
                area = "options"; 
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 2) { game_end(); } //Exit
        }
    }
    else if(area == "options")
    {
        selection = clamp(selection, 0, ds_list_size(options)-2);
        
        //if(keyboard_check_pressed(vk_space))
        if(global.in_p[? mkeys.accept])
        {
            if(selection == 0)
            {
                last_area = area;
                area = "main";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 1){ global.grid = !global.grid; } //Grid 
            else if(selection == 2) //Ghost
            { 
                global.ghost = !global.ghost;
                //with(obj_ghostSeg) { visible = global.ghost; }
            } 
            else if(selection == 3) //Random
            {
                if(global.rand_method == "Full") { global.rand_method = "Bag"; }
                else if(global.rand_method == "Bag") { global.rand_method = "Full"; }
            }
            else if(selection == 4) //Controls
            {
                last_area = area;
                area = "controls";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 5) //Display 
            {
                area = last_area;
                area = "display";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }  
            else if(selection == 6) //Sound 
            {
                area = last_area;
                area = "sound";
                selection = 0;
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }  
        }
    }
    else if(area == "controls")
    {
        selection = clamp(selection, 0, ds_list_size(controls)-2);
        
        //if(keyboard_check_pressed(vk_space))
        if(global.in_p[? mkeys.accept])
        {
            if(selection == 0)
            {
                selection = 0 ; 
                area = last_area;
                area = "options"; 
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
        }
    }
    else if(area == "display")
    {
        selection = clamp(selection, 0, ds_list_size(controls)-2);
        
        //if(keyboard_check_pressed(vk_space))
        if(global.in_p[? mkeys.accept])
        {
            if(selection == 0) //Go Back
            {
                selection = 0 ; 
                area = last_area;
                area = "options"; 
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 1) // Resolution
            {
                for(var index = 0; index &lt; array_length_1d(global.resolutions); index++)
                {
                    if(global.resolutions[index] == global.resolution)
                    {
                        index++;
                        if(index == array_length_1d(global.resolutions)) 
                            { global.resolution = global.resolutions[0]; }
                        else { global.resolution = global.resolutions[index]; }
                        // = global.resolution;
                    }
                }
            }
            else if(selection == 2) //Refresh Rate
            {
                for(var index = 0; index &lt; array_length_1d(global.refresh_rates); index++)
                {
                    if(global.refresh_rates[index] == global.refresh_rate)
                    {
                        index++;
                        if(index == array_length_1d(global.refresh_rates)) 
                            { global.refresh_rate = global.refresh_rates[0]; }
                        else { global.refresh_rate = global.refresh_rates[index]; }
                        room_speed = global.refresh_rate;
                        MAX_SCROLL_SPEED = view_wport[0]*0.05*room_speed/60;
                    }
                }
            }  
            else if(selection == 3)  //Debug overlay
            {
                global.debug_overlay = !global.debug_overlay; 
                show_debug_overlay(global.debug_overlay); 
                save_settings();
            } 
        }
    }
    else if(area == "sound")
    {
        selection = clamp(selection, 0, ds_list_size(sound)-2);
        
        //if(keyboard_check_pressed(vk_space))
        if(global.in_p[? mkeys.accept])
        {
            if(selection == 0) //Back
            {
                selection = 0 ; 
                area = last_area;
                area = "options"; 
                goal_x = views[? area+"_x"];
                goal_y = views[? area+"_y"];
                old_x = x;
                old_y = y;
            }
            else if(selection == 1) //Music
            {
                global.music_level += 5;
                if(global.music_level &gt;= 105) { global.music_level = 5; }
                save_settings();
            }
            else if(selection == 2) //SFX
            {
                global.sfx_level += 5;
                if(global.sfx_level &gt;= 105) { global.sfx_level = 5; }
                save_settings();
            }  
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_gray);
draw_set_alpha(0.5);
draw_rectangle(0, 0, w, h, false);
draw_set_alpha(1);
*/

draw_set_color(c_black);
draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_set_font(my_huge_font);
draw_text(w/2, string_height("TETRIS")*0.25, "TETRIS");
draw_set_font(my_font);



//MAIN MENU

draw_set_valign(fa_middle);

if(goal_x == x and goal_y = y)
{
    draw_set_color(c_teal);
    draw_set_font( ds_list_find_value( sections[? area], 0) );
    if(area == "controls" and selection &gt; CONTROL_PAGE_NUMBER) 
    {
        draw_rectangle( (w*PADDING/2), ((h/3)-(box_large_height/2)+(large_height*CONTROL_PAGE_NUMBER)), (w-(w*PADDING/2)), ((h/3)+(box_large_height/2)+(large_height*CONTROL_PAGE_NUMBER)), false);
    }
    else
    {
        var start_height = 0
        if(area == "main") { start_height = h/2; }
        else if(area == "options") { start_height = h/3; }
        else if(area == "controls") { start_height = h/3; }
        else if(area == "display") { start_height = h/3; }
        else if(area == "sound") { start_height = h/3; }
        draw_rectangle( (w*PADDING/2), ((start_height)-(box_large_height/2)+(large_height*selection)), (w-(w*PADDING/2)), ((start_height)+(box_large_height/2)+(large_height*selection)), false);
    }
}

draw_set_color(c_black);

//MAIN
if(area == "main" or (last_area == "main" and ( abs(x - goal_x) &gt; tolerance or abs(y - goal_y) &gt; tolerance )))
{
    draw_set_font(main[|0]);
    for(i = 0; i &lt; ds_list_size(main)-1; i++)
    {
        draw_text(w/2-x, h/2+large_height*i-y, main[|i+1]);
    }
}

//OPTIONS
if(area == "options" or (last_area == "options" and ( abs(x - goal_x) &gt; tolerance or abs(y - goal_y) &gt; tolerance )))
{
    draw_set_font(my_huge_font);
    draw_text(w/2+w-x, string_height("OPTIONS")*1.5*(1+PADDING) - y, "OPTIONS");
    draw_set_font(options[|0]);
    draw_set_halign(fa_left);
    for(i = 0; i &lt; ds_list_size(options)-1; i++)
    {
        draw_text(w*PADDING/2+w-x, h/3+large_height*i-y, options[|i+1]);
        draw_set_halign(fa_right);
        if(i == 0) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, "Go Back"); }
        else if(i == 1) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.grid, "oo")); }
        else if(i == 2) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, boolean_replace(global.ghost, "oo")); }
        else if(i == 3) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, global.rand_method); }
        else if(i == 4) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, "&gt;"); }
        else if(i == 5) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, "^"); }
        else if(i == 6) { draw_text(2*w-x-w*PADDING/2, h/3+large_height*i-y, "v"); }
        draw_set_halign(fa_left);
    }
}

//CONTROLS
if(area == "controls" or (last_area == "controls" and ( abs(x - goal_x) &gt; tolerance or abs(y - goal_y) &gt; tolerance )))
{
    draw_set_font(my_huge_font);
    draw_set_halign(fa_center);
    draw_text(w/2+w*2-x, string_height("CONTROLS")*1.5*(1+PADDING - y), "CONTROLS");
    if(!surface_exists(controls_surface)) { controls_surface = generate_controls_surface(); }
    var surf_offset = 0;
    var surf_y = h/3-large_height*0.5;
    triangle_w = 15;
    triangle_h = 15;
    if(selection &gt; CONTROL_PAGE_NUMBER) 
    { 
        surf_offset = selection - CONTROL_PAGE_NUMBER; 
    
        draw_set_color(c_black);
        draw_triangle(  w*2+w/2-x-triangle_w/2, surf_y-10,
                        w*2+w/2-x, surf_y-10-triangle_h,
                        w*2+w/2-x+triangle_w/2, surf_y-10,
                        false);
    }
    else
    {
        draw_set_color(c_black);
        draw_triangle(  w*2+w/2-x-triangle_w/2, view_hview[0]-20-triangle_h,
                        w*2+w/2-x, view_hview[0]-20,
                        w*2+w/2-x+triangle_w/2, view_hview[0]-20-triangle_h,
                        false);
    }
    var temp_surf = surface_create( surface_get_width(controls_surface), (CONTROL_PAGE_NUMBER+1)*large_height);
    surface_copy_part(temp_surf, 0, 0, controls_surface, 0, surf_offset*large_height, surface_get_width(controls_surface), room_height-surf_y);
    draw_surface(temp_surf, w*2-x+w*PADDING/2, surf_y);
    surface_free(temp_surf);
}


//DISPLAY
if(area == "display" or (last_area == "display" and ( abs(x - goal_x) &gt; tolerance or abs(y - goal_y) &gt; tolerance )))
{
    draw_set_font(my_huge_font);
    draw_set_halign(fa_center);
    draw_text(w-x+w/2, string_height("OPTIONS")*1.5*(1+PADDING)-h-y, "DISPLAY OPTIONS");
    draw_set_font(display[|0]);
    draw_set_halign(fa_left);
    for(i = 0; i &lt; ds_list_size(display)-1; i++)
    {
        draw_text(w+w*PADDING/2-x, -y-h+h/3+large_height*i, display[|i+1]);
        draw_set_halign(fa_right);
        if(i == 0) { draw_text(w*2-w*PADDING/2-x, -y-h+h/3+large_height*i, "Go Back"); }
        else if(i == 1) { draw_text(w*2-w*PADDING/2-x, -y-h+h/3+large_height*i, string(global.resolution)); }
        else if(i == 2) { draw_text(w*2-w*PADDING/2-x, -y-h+h/3+large_height*i, string(global.refresh_rate)); }
        else if(i == 3) { draw_text(w*2-w*PADDING/2-x, -y-h+h/3+large_height*i, boolean_replace(global.debug_overlay, "oo")); }
        draw_set_halign(fa_left);
    } 
}


//SOUND
if(area == "sound" or (last_area == "sound" and ( abs(x - goal_x) &gt; tolerance or abs(y - goal_y) &gt; tolerance )))
{
    draw_set_font(my_huge_font);
    draw_set_halign(fa_center);
    draw_text(w-x+w/2, string_height("OPTIONS")*1.5*(1+PADDING)+h-y, "AUDIO OPTIONS");
    draw_set_font(sound[|0]);
    draw_set_halign(fa_left);
    for(i = 0; i &lt; ds_list_size(sound)-1; i++)
    {
        draw_text(w+w*PADDING/2-x, -y+h+h/3+large_height*i, sound[|i+1]);
        draw_set_halign(fa_right);
        if(i == 0) { draw_text(w*2-w*PADDING/2-x, -y+h+h/3+large_height*i, "Go Back"); }
        else if(i == 1) { draw_text(w*2-w*PADDING/2-x, -y+h+h/3+large_height*i, string(global.music_level)); }
        else if(i == 2) { draw_text(w*2-w*PADDING/2-x, -y+h+h/3+large_height*i, string(global.sfx_level)); }
    //    else if(i == 3) { draw_text(w*2-w*PADDING/2-x, -y-h+h/3+large_height*i, boolean_replace(global.debug_overlay, "oo")); }
        draw_set_halign(fa_left);
    } 
}
    
    
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_font(my_font);


if(global.debug_overlay)
{
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    draw_set_font(my_font);
    draw_set_color(c_white);
    draw_text_color_outline(10, 50, "FPS_REAL: " + string(fps_real), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
//    draw_text_color_outline(10, 50 + string_height("FPS"), "FPS_AVG: " + string(average_fps), c_white, c_white,  1, c_black, c_black, 1, 2, 3, 1, 1, 0);
    draw_text_color_outline(10, 50 + string_height("FPS")*2, "DISPLAY_FPS: " + string(1000000/delta_time), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, 50 + string_height("FPS")*3, "FRAME_TIME (ms): " + string_format(delta_time/1000, 5, 3), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    
    draw_text_color_outline(10, view_hview[0]-10-string_height("IG")*6, "X_DONE: " + string(boolean_replace(x == goal_x, "tf")), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, view_hview[0]-10-string_height("IG")*5, "Y_DONE: " + string(boolean_replace(y == goal_y, "tf")), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, view_hview[0]-10-string_height("IG")*4, "X: " + string(x), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, view_hview[0]-10-string_height("IG")*3, "Y: " + string(y), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, view_hview[0]-10-string_height("IG")*2, "GOAL_X: " + string(goal_x), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, view_hview[0]-10-string_height("GOAL_X"), "GOAL_Y: " + string(goal_y), c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
    draw_text_color_outline(10, view_hview[0]-10, "AREA: " + area, c_white, c_white,  1, c_black, c_black, 1, 2, 4, 1, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
