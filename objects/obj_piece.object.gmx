<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SEGMENT_SIZE = global.segmentSize; //Local Copy

surf = surface_create_log(4*global.segmentSize, 4*global.segmentSize);

falling = true;
canFall = false;
moving = true;
type = "";
rot = 0;
IG = 0;
swapped = false;
speeding = 1;
SOFT_DROP_SPEED = global.SOFT_DROP_SPEED; //Local copy

m_b_a = global.MOVING_COLOR_BLEND_AMT; //Local copy
g_b_a = global.GHOST_BLEND_AMT; //Local copy

autoIncDelay = 10/60; //10 frames before framerate changes
autoIncSpeed = 3/60; //3 frame of delay (before framerate changes) between moves
slideDir = " ";

nonmovementTimer = -1; 
sliderTimer = -1;
rotationTimer = -1; 
fallingTimer = -1; 

if(global.rand_method == "Full")
{
    if(global.control.type == " ") 
    { 
        type = global.control.preview[0];
        for(i = 0; i &lt; global.previewCount-1; i++)
            { global.control.preview[i] = global.control.preview[i+1]; }
        global.control.preview[global.previewCount-1] = choose("long", "square", "s", "z", "l", "rl", "t"); 
    } 
    else 
    { 
        type = global.control.type; 
        global.control.type = " ";
    } 
}
else if(global.rand_method == "Bag")
{
    refresh_bag();
    if(global.control.type == " ")
    {
        type = global.bag[|0];
        shift_list_left(global.bag, 1);
        if( ds_list_size(global.bag) &lt; global.previewCount ) { refresh_bag(); }
    }
    else
    {
        type = global.control.type;
        global.control.type = " ";
    }
}
//type = "long";

if(type == "long")
{
    x = 3;
    y = 4;

    c = global.lBlue; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color

    segments[0] = instance_create(x+0, y, obj_segment);
    segments[1] = instance_create(x+1, y, obj_segment);
    segments[2] = instance_create(x+2, y, obj_segment);    
    segments[3] = instance_create(x+3, y, obj_segment);

    rot = 90;
}
else if(type == "square")
{
    x = 4;
    y = 5;
    
    c = global.yellow; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color
    
    segments[0] = instance_create(x+0, y-0, obj_segment);
    segments[1] = instance_create(x+1, y-0, obj_segment);
    segments[2] = instance_create(x+0, y-1, obj_segment);   
    segments[3] = instance_create(x+1, y-1, obj_segment);
}
else if(type == "s")
{
    x = 3;
    y = 4;
    
    c = global.green; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color

    segments[0] = instance_create(x+0, y+1, obj_segment);
    segments[1] = instance_create(x+1, y+1, obj_segment);
    segments[2] = instance_create(x+1, y+0, obj_segment);    
    segments[3] = instance_create(x+2, y+0, obj_segment);
}
else if(type == "z")
{
    x = 3;
    y = 4;
    
    c = global.red; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color
    
    segments[0] = instance_create(x+0, y+0, obj_segment);
    segments[1] = instance_create(x+1, y+0, obj_segment);
    segments[2] = instance_create(x+1, y+1, obj_segment);  
    segments[3] = instance_create(x+2, y+1, obj_segment);
}
else if(type == "l")
{
    x = 3;
    y = 4;

    c = global.orange; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color

    segments[0] = instance_create(x+0, y+1, obj_segment);
    segments[1] = instance_create(x+0, y+0, obj_segment);
    segments[2] = instance_create(x+1, y+0, obj_segment);   
    segments[3] = instance_create(x+2, y+0, obj_segment);
    
    rot = 90;
}
else if(type == "rl")
{
    x = 3;
    y = 4;
    
    c = global.dBlue; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color

    
    segments[0] = instance_create(x+2, y+1, obj_segment);
    segments[1] = instance_create(x+2, y+0, obj_segment);
    segments[2] = instance_create(x+1, y+0, obj_segment);  
    segments[3] = instance_create(x+0, y+0, obj_segment);
    
    rot = 270;
}
else if(type == "t")
{
    x = 3;
    y = 4;
    
    c = global.magenta; //Color
    m_c = merge_color(c, c_white, m_b_a); //Moving color
    g_c = merge_color(c, c_white, g_b_a); //Ghost color

    segments[0] = instance_create(x+1, y+0, obj_segment);
    segments[1] = instance_create(x+0, y+0, obj_segment);
    segments[2] = instance_create(x+1, y+1, obj_segment);
    segments[3] = instance_create(x+2, y+0, obj_segment);
}

ghostX = x;
ghostY = y;

for(i = 0; i &lt; 4; i++)
{
    ghosts[i] = instance_create(segments[i].x, segments[i].y, obj_ghostSeg);
    
    segments[i].parent = id;
    ghosts[i].parent = id;
    
    segments[i].color = c;
    ghosts[i].color = g_c; 
    
    segments[i].active_color = m_c;
}

//LOSS CHECK
for(var i = 0; i &lt; 4; i++)
{
    if(global.segArr[segments[i].x, segments[i].y] != noone)
    {
        print("YOU LOST");
        room_goto(rm_main_menu);
        audio_stop_sound(global.control.music);
    }
}

height = room_height; //The starting height for the ghosts search
inc = global.segmentSize;

updateGhost();

if(keyboard_check(vk_left)) 
{
    sliderTimer = autoIncSpeed;
    slideDir = "l";
}
else if(keyboard_check(vk_right)) 
{
    sliderTimer = autoIncSpeed;
    slideDir = "r";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean ghosts
instance_destroy(ghosts[0]);
instance_destroy(ghosts[1]);
instance_destroy(ghosts[2]);
instance_destroy(ghosts[3]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE ORIGIN
if(global.active == id and !global.paused)
{
    x = min(segments[0].x, segments[1].x, segments[2].x, segments[3].x);
    y = min(segments[0].y, segments[1].y, segments[2].y, segments[3].y);
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//First set of actions (things that would cause solidification)
if(global.active == id and !global.paused)
{  
    //HARD DROP
    if(global.hardDrop and global.in_p[? gkeys.hd])
    {
        var yDiff = global.BLOCKS_TALL+4;
        
        for(var i = 0; i &lt; 4; i++) 
        { 
            var this_x = segments[i].x
            for(var h = segments[i].y; h &lt; global.BLOCKS_TALL+4; h++)
            {
                var hit = global.segArr[this_x, h];
                if(hit != noone and hit.parent != id)
                {
                    if(h - segments[i].y - 1 &lt; yDiff) { yDiff = h - segments[i].y - 1; }
                    break;
                }
               
            }
            if(h &gt;= global.BLOCKS_TALL+4)
            {
                if(h - segments[i].y - 1 &lt; yDiff) { yDiff = global.BLOCKS_TALL+4 - segments[i].y - 1; }
            }
        }
        for(i = 0; i &lt; 4; i++) { segments[i].y  += yDiff; }
        
        global.points += (yDiff*2);
        
        var snd = audio_play_sound(snd_harddrop, 10, false);
        audio_sound_gain(snd, global.sfx_level/100, 0);
        solidify(id);
    }

    if(sliderTimer &gt; -1) { sliderTimer -= delta_time/1000000; }
    if(nonmovementTimer &gt; -1) { nonmovementTimer -= delta_time/1000000; }
    if(rotationTimer &gt; -1) { rotationTimer -= delta_time/1000000; }
    if(fallingTimer &gt; -1) { fallingTimer -= delta_time/1000000; }
    
    if(sliderTimer &lt;= 0 and sliderTimer != -1)  { event_user(1); }
    if(nonmovementTimer &lt;= 0 and nonmovementTimer != -1)  { event_user(0);}
    if(rotationTimer &lt;= 0 and rotationTimer != -1)  { event_user(2); }
    if(fallingTimer &lt;= 0 and fallingTimer != -1)  { event_user(3); } 
}
//If it didn't solidify, apply next movement options
if(global.active == id and !global.paused) //Recheck to make sure that it is still good
{
    //FALL CHECK
    var canFall = true;   
    
    if(y &gt;= room_height)
    { 
        y = room_height;
        canFall = false; 
    }
    else
    {
        for(i = 0; i &lt; 4; i++)    
        {
            if( segments[i].y+1 &gt;= global.BLOCKS_TALL+4) //+4 to handle pieces off the top
            {
                canFall = false;
                break;
            }
            else
            {
                var _hit = global.segArr[segments[i].x, segments[i].y+1];
                if( _hit != noone and _hit.parent != id )
                { 
                    canFall = false;
                    break;
                }
            }
        }
    }
    
    if ( canFall )
    {
        falling = true;
        nonmovementTimer = -1 
        rotationTimer = -1;
        fallingTimer = -1;
    }
    else
    {
        falling = false;
        if( nonmovementTimer == -1 ) { nonmovementTimer = global.SOLIDIFY_TIME; }
        if( rotationTimer == -1 ) { rotationTimer = global.SOLIDIFY_TIME*global.ROTATION_SOLIDIFY_MODIFIER; } 
        if( fallingTimer == -1 ) { fallingTimer = global.SOLIDIFY_TIME*global.FALLING_SOLIDIFY_MODIFIER; }       if( fallingTimer == -1 ) { fallingTimer = global.SOLIDIFY_TIME*global.FALLING_SOLIDIFY_MODIFIER;  }
    }

    //RELEASE CHECKS
    if(!global.in[? gkeys.right] and !global.in[? gkeys.left]) 
    { 
        slideDir = " ";
        slideTimer = -1;
    }
    
    //PRESS CHECKS
    if(global.in_p[? gkeys.right])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        if(global.active == id)
        {   
            canMove = true;
            if(moving)
            {
                for(var i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x+1 &gt;= global.BLOCKS_WIDE )
                    {
                        canMove = false; 
                        break;
                    }
                    else if(global.segArr[segments[i].x+1, segments[i].y] != noone)
                    {
                        if(global.segArr[segments[i].x+1, segments[i].y].parent != id)
                        {
                            canMove = false;
                            break;
                        }
                    }
                }
                
                if(canMove)
                {
                    var snd = audio_play_sound(snd_tick, 10, false);
                    audio_sound_gain(snd, global.sfx_level/100, 0);
                    for(i = 0; i &lt; 4; i++) { segments[i].x++; }
                    updateGhost();
                }
            }  
            
            sliderTimer = autoIncDelay;
            slideDir = "r";
        }
    }
    if(global.in_p[? gkeys.left])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        canMove = true;
        if(moving)
        {
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x &lt;= 0 )
                {
                    canMove = false; 
                    break;
                }
                else if(global.segArr[segments[i].x-1, segments[i].y] != noone)
                {
                    if(global.segArr[segments[i].x-1, segments[i].y].parent != id)
                    {
                        canMove = false;
                        break;
                    }
                }
            }
            
            if(canMove)
            {
                var snd = audio_play_sound(snd_tick, 10, false);
                audio_sound_gain(snd, global.sfx_level/100, 0);
                for(var i = 0; i &lt; 4; i++) { segments[i].x--; }
                updateGhost();
            }
        } 
        
        sliderTimer = autoIncDelay;
        slideDir = "l";
    }
    
    //ROTATE
    if(global.in_p[? gkeys.ccw])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        canMove = true;
        failed = false;
        
        for(i = 0; i &lt; 4; i++)
        {
            oldX[i] = segments[i].x;
            oldY[i] = segments[i].y;
        }
    
        //LONG ROTATION RULES
        if(type == "long")
        {   
            if( rot == 0 or rot == 180 ) //To horizontal
            {
                segments[0].x = segments[2].x - 2;
                segments[0].y = segments[2].y;
                segments[1].x = segments[2].x - 1;
                segments[1].y = segments[2].y;
                segments[3].x = segments[2].x + 1;
                segments[3].y = segments[2].y;
                
                good[3] = true;
                good[2] = true;
                good[1] = true;
                good[0] = true;
                
                for(i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x  &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE )  
                    { 
                        good[i] = false; 
                        failed = true;
                    } 
                    else if(segments[i].y &gt;= global.BLOCKS_TALL+4 )
                    {
                        good[i] = false;
                        failed = true;
                    }
                    else 
                    {
                        var hit = global.segArr[segments[i].x, segments[i].y];
                        if(hit != noone and hit.parent != id)
                        {
                            good[i] = false; 
                            failed = true;
                        }
                    }
                }
                for(i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE ) 
                    { 
                        good[i] = false; 
                        failed = true;
                    } 
                    else if(segments[i].y &gt;= global.BLOCKS_TALL+4 )
                    {
                        good[i] = false;
                        failed = true;
                    }
                    else
                    {
                        var _hit = global.segArr[segments[i].x, segments[i].y];
                        if( _hit != noone and _hit.parent != id )
                        { 
                            good[i] = false; 
                            failed = true;
                        }
                    }
                }
                
                if(!failed)
                {
                    rot -= 90;
                    if(rot &lt;= -90) { rot = 270; }  
                }
                else
                {
                    if(!good[0] and good[1] and good[2] and good[3]) //XOOO
                    {
                        var safe = true;
                        if(segments[3].x + 1 &lt; global.BLOCKS_WIDE)
                        {
                            var p1 = global.segArr[segments[3].x+1, segments[3].y];
                            if(p1 != noone and p1.parent != id) { safe = false; }
                        }
                        else { safe = false; }
                        
                        if(safe)
                        {
                            failed = false; 
                            
                            segments[0].x++;
                            segments[1].x++;
                            segments[2].x++;
                            segments[3].x++;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                    else if(good[0] and good[1] and good[2] and !good[3]) //OOOX
                    {
                        var safe = true;
                        if(segments[0].x-1 &gt;= 0)
                        {
                            var p1 = global.segArr[segments[0].x-1, segments[0].y];
                            if(p1 != noone and p1.parent != id) { safe = false; }
                        }
                        else { safe = false; }
                        
                        if(safe)
                        {
                            failed = false; 
                            
                            segments[0].x--;
                            segments[1].x--;
                            segments[2].x--;
                            segments[3].x--;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                    else if(!good[1] and good[2] and good[3]) //_XOO
                    {
                        var safe = true;
                        if(segments[3].x+2 &lt; global.BLOCKS_WIDE)
                        {
                            var p1 = global.segArr[segments[3].x+1, segments[3].y];
                            var p2 = global.segArr[segments[3].x+2, segments[3].y];
                            if((p1 != noone and p1.parent != id) or (p2 != noone and p2.parent != id)) { safe = false; }
                        }
                        else { safe = false; }
                        
                        if(safe)
                        {
                            failed = false; 
                            
                            segments[0].x += 2;
                            segments[1].x += 2;
                            segments[2].x += 2;
                            segments[3].x += 2;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                    else if(good[0] and good[1] and !good[2]) //OOX_
                    {
                        var safe = true;
                        if(segments[3].x-2 &lt; global.BLOCKS_WIDE)
                        {
                            var p1 = global.segArr[segments[3].x-1, segments[3].y];
                            var p2 = global.segArr[segments[3].x-2, segments[3].y];
                            if((p1 != noone and p1.parent != id) or (p2 != noone and p2.parent != id)) { safe = false; }
                        }
                        else { safe = false; }
                        
                        if(safe)
                        {
                            failed = false; 
                            
                            segments[0].x -= 2;
                            segments[1].x -= 2;
                            segments[2].x -= 2;
                            segments[3].x -= 2;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                }
            }
            else if( rot == 90 or rot == 270 ) //To vertical 
            {
                segments[0].x = segments[2].x;
                segments[0].y = segments[2].y + 2;
                segments[1].x = segments[2].x;
                segments[1].y = segments[2].y + 1;
                segments[3].x = segments[2].x;
                segments[3].y = segments[2].y - 1;
                
                good[3] = true;
                good[2] = true;
                good[1] = true;
                good[0] = true;
                
                
                for(i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE ) 
                    { 
                        good[i] = false; 
                        failed = true;
                    } 
                    else if(segments[i].y &gt;= global.BLOCKS_TALL+4 )
                    {
                        good[i] = false;
                        failed = true;
                    }
                    else 
                    {
                        var hit = global.segArr[segments[i].x, segments[i].y];
                        if(hit != noone and hit.parent != id)
                        {
                            //print("ROTATION COLLISION FOR " + string(i) + " AT (" + string(segments[i].x) + ", " + string(segments[i].y) + ") WITH " + string(hit));
                            good[i] = false; 
                            failed = true;
                        }
                    }
                }
                print(string(good[0]) + " " + string(good[1]) + " " + string(good[2]) + " " + string(good[3]));
                if(!failed)
                {
                    rot -= 90;
                    if(rot &lt;= -90) { rot = 270; }  
                }
                else
                {
                    //O
                    //O
                    //O
                    //X
                    if(!good[0] and good[1] and good[2] and good[3]) 
                    {
                        //print(1);
                        var safe = true;
                        if(segments[3].y-1 &lt; 0) { safe = false; }
                        else
                        {
                            var p1 = global.segArr[segments[3].x, segments[3].y-1];
                            if(p1 != noone and p1.parent != id) { safe = false; }
                        }
                        
                        if(safe)
                        {
                            //print("SAFE");
                            failed = false; 
                            
                            segments[0].y--;
                            segments[1].y--;
                            segments[2].y--;
                            segments[3].y--;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                    //X
                    //O
                    //O
                    //O
                    else if(good[0] and good[1] and good[2] and !good[3]) 
                    {
                        //print(2);
                        var safe = true;
                        if(segments[0].y + 1 &gt;= global.BLOCK_TALL+4) { safe = false; }
                        else
                        {
                            var p1 = global.segArr[segments[0].x, segments[0].y + 1];
                            if(p1 != noone and p1.parent != id) { safe = false; }
                        }
                        
                        if(safe)
                        {
                            //print("SAFE");
                            failed = false; 
                            
                            segments[0].y++;
                            segments[1].y++;
                            segments[2].y++;
                            segments[3].y++;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                    //O
                    //O
                    //X
                    //_
                    else if(!good[1] and good[2] and good[3])
                    {
                        //print(3);
                        var safe = true;
                        if(segments[0].y-2 &lt;= 0) { safe = false; }
                        else
                        {
                            var p1 = global.segArr[segments[3].x, segments[3].y-1];
                            var p2 = global.segArr[segments[3].x, segments[3].y-2];
                            if( (p1 != noone and p1.parent != id) or (p2 != noone and p2.parent != id) )  { safe = false; }
                        }
                        
                        if(safe)
                        {
                            //print("SAFE");
                            //print("SAFE BUMP UP TWO");
                            failed = false; 
                            
                            segments[0].y -= 2;
                            segments[1].y -= 2;
                            segments[2].y -= 2;
                            segments[3].y -= 2;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                    //_
                    //X
                    //O
                    //O
                    else if(good[0] and good[1] and !good[2])
                    {
                        //print(4);
                        var safe = true;
                        if(segments[0]+2 &gt; global.BLOCKS_TALL+4) { safe = false; }
                        else
                        {
                            var p1 = global.segArr[segments[0].x, segments[0].y+1];
                            var p2 = global.segArr[segments[0].x, segments[0].y+2];
                            if( (p1 != noone and p1.parent != id) or (p2 != noone and p2.parent != id) ) { safe = false; }
                        }
                        
                        if(safe)
                        {
                            //print("SAFE");
                            failed = false; 
                            
                            segments[0].y += 2;
                            segments[1].y += 2;
                            segments[2].y += 2;
                            segments[3].y += 2;
                            
                            rot -= 90;
                            if(rot &lt;= -90) { rot = 270; }  
                        }
                        else
                        {
                            for(i = 0; i &lt; 4; i++)
                            {
                                segments[i].x = oldX[i];
                                segments[i].y = oldY[i];
                            }
                        }
                    }
                }
            }
        }
        else
        {
            //else if (type == "square")
            //{
            //    //show_debug_message("HURR.")
            //}
            //else
            if(type = "l")
            {
                if (rot == 0 ) //Flat at bottom to flat at right
                {   
                    segments[2].y++;
                    segments[3].x = segments[2].x - 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x + 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y - 1;
                }
                else if ( rot == 90 ) //Flat at left to bottom
                {
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y - 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y + 1;
                    segments[0].x = segments[1].x + 1;
                    segments[0].y = segments[1].y;
                }
                else if ( rot == 180 ) //Flat at top to flat at left   
                {
                    segments[3].x = segments[2].x + 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x - 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y + 1;
                }
                else if (rot == 270) //Flat at right to top
                {
                    segments[2].y--;
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y + 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y - 1;
                    segments[0].x = segments[1].x - 1;
                    segments[0].y = segments[1].y;  
                }   
            }
            
            //J AKA RL ROTATION RULES
            else if(type = "rl")
            {
                if ( rot == 0 ) //Flat at bottom to right
                {
                    segments[3].x = segments[2].x - 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x + 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y + 1;
                }
                else if ( rot == 90 ) //Flat at left to bottom
                {
                    segments[2].y--
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y - 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y + 1;
                    segments[0].x = segments[1].x - 1;
                    segments[0].y = segments[1].y;
                }
                else if ( rot == 180 ) //Flat at top to flat at left   
                {
                    segments[2].y++;
                    segments[3].x = segments[2].x + 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x - 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y - 1;
                }
                else if (rot == 270) //Flat at right to top
                {
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y + 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y - 1;
                    segments[0].x = segments[1].x + 1;
                    segments[0].y = segments[1].y;
                }
            }
            else if(type = "t")
            {
                if (rot == 0 ) //pointing down to right
                {
                    segments[1].x = segments[0].x;
                    segments[1].y = segments[0].y + 1;
                    segments[2].x = segments[0].x + 1;
                    segments[2].y = segments[0].y;
                    segments[3].x = segments[0].x;
                    segments[3].y = segments[0].y - 1;
                }
                else if ( rot == 90 ) //Left to down
                {
                    segments[1].x = segments[0].x - 1;
                    segments[1].y = segments[0].y;
                    segments[2].x = segments[0].x;
                    segments[2].y = segments[0].y + 1;
                    segments[3].x = segments[0].x + 1;
                    segments[3].y = segments[0].y;
                }
                else if ( rot == 180 )  //Up to left 
                {
                    segments[0].y--;
                    segments[1].x = segments[0].x;
                    segments[1].y = segments[0].y - 1;
                    segments[2].x = segments[0].x - 1;
                    segments[2].y = segments[0].y;
                    segments[3].x = segments[0].x;
                    segments[3].y = segments[0].y + 1;
                }
                else if (rot == 270) //Right to up
                {
                    segments[0].y++;
                    segments[1].x = segments[0].x + 1;
                    segments[1].y = segments[0].y;
                    segments[2].x = segments[0].x;
                    segments[2].y = segments[0].y - 1;
                    segments[3].x = segments[0].x - 1;
                    segments[3].y = segments[0].y;
                }
            }
            else if ( type == "s" ) 
            {
                if(rot == 180 or rot == 0) // s to steps down right
                {
                    segments[0].y -= 2;
                    segments[1].x--;
                    segments[1].y--;
                    segments[3].x--;
                    segments[3].y++;
                }
                else if (rot == 270 or rot == 90) //steps down right to s 
                {
                    segments[0].y += 2;
                    segments[1].x++;
                    segments[1].y++;
                    segments[3].x++;
                    segments[3].y--;
                }  
            }
            else if ( type == "z" ) 
            {
                if(rot == 180 or rot == 0) // z to steps down left
                {
                    segments[0].x += 2;
                    segments[0].y--;
                    segments[1].x++;
                    segments[2].y--;
                    segments[3].x--;
                }
                else if (rot == 270 or rot == 90) //steps down left to z 
                {
                    segments[0].x -= 2;
                    segments[0].y++;
                    segments[1].x--;
                    segments[2].y++;
                    segments[3].x++;
                }  
            }
            
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE ) { failed = true; } 
                else if ( segments[i].y &gt;= global.BLOCKS_TALL+4 ) { failed = true; }
                else
                {
                    var _hit = global.segArr[segments[i].x, segments[i].y];
                    if(_hit != noone and _hit.parent != id) { failed = true; } 
                }
            }
            
            if(!failed)
            {
                rot -= 90;
                if(rot &lt;= -90) { rot = 270; }  
            }
            else
            {
                //Bump right
                good = true
                for(var i = 0; i &lt; 4; i++)
                {
                    if(segments[i].x + 1 &gt;= global.BLOCKS_WIDE) { good = false; }
                    else if(segments[i].x + 1 &lt; 0) { good = false; }
                    else if ( segments[i].y &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                    else
                    {
                        var p1 = global.segArr[segments[i].x + 1, segments[i].y];
                        if(p1 != noone and p1.parent != id)
                            { good = false; }
                    }
                    if(!good) { break; }
                }
                if(good)
                {
                    failed = false;
                    
                    segments[0].x++;
                    segments[1].x++;
                    segments[2].x++;
                    segments[3].x++;
                }
                else
                {
                    //Bump left
                    good = true;
                    for(i = 0; i &lt; 4; i++)
                    {
                        if(segments[i].x - 1 &gt;= global.BLOCKS_WIDE) { good = false; }
                        else if(segments[i].x - 1 &lt; 0) { good = false; }
                        else if ( segments[i].y &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                        else
                        {
                            var p1 = global.segArr[segments[i].x - 1, segments[i].y];
                            if(p1 != noone and p1.parent != id)
                                { good = false; }
                        }
                        if(!good) { break; }
                    }
                    if(good)
                    {
                        failed = false;
                        
                        segments[0].x--;
                        segments[1].x--;
                        segments[2].x--;
                        segments[3].x--;
                    }
                    else
                    {
                        //Bump down
                        good = true;
                        for(i = 0; i &lt; 4; i++)
                        {
                            if(segments[i].x &gt;= global.BLOCKS_WIDE) { good = false; }
                            else if(segments[i].x &lt; 0) { good = false; }
                            else if ( segments[i].y + 1 &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                            else
                            {
                                var p1 = global.segArr[segments[i].x, segments[i].y + 1];
                                if(p1 != noone and p1.parent != id)
                                    { good = false; }
                            }
                            if(!good) { break; }
                        }
                        if(good)
                        {
                            failed = false;
                            
                            segments[0].y++;
                            segments[1].y++;
                            segments[2].y++;
                            segments[3].y++;
                        }
                        else
                        {
                            //Bump up
                            good = true;
                            for(i = 0; i &lt; 4; i++)
                            {
                                if(segments[i].x &gt;= global.BLOCKS_WIDE) { good = false; }
                                else if(segments[i].x &lt; 0) { good = false; }
                                else if ( segments[i].y - 1 &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                                else
                                {
                                    var p1 = global.segArr[segments[i].x, segments[i].y - 1];
                                    if(p1 != noone and p1.parent != id)
                                        { good = false; }
                                }
                                if(!good) { break; }
                            }
                            if(good)
                            {
                                failed = false;
                            
                                segments[0].y--;
                                segments[1].y--;
                                segments[2].y--;
                                segments[3].y--;
                            }
                        }
                    }   
                }
                if(!failed)
                {
                    rot -= 90;
                    if(rot &lt;= -90) { rot = 270; }  
                }
            }
        }
        
        if(failed)
        {
            segments[0].x = oldX[0];
            segments[1].x = oldX[1];
            segments[2].x = oldX[2];
            segments[3].x = oldX[3];
            segments[0].y = oldY[0];
            segments[1].y = oldY[1];
            segments[2].y = oldY[2];
            segments[3].y = oldY[3];
        }
        else
        {
            if(canFall == true) { rotationTimer = -1; }
            else { rotationTimer = global.SOLIDIFY_TIME*global.ROTATION_SOLIDIFY_MODIFIER; }
            updateGhost();  //THIS IS THE IDEAL PLACE, BUT UNTIL I FIX KICKING, THIS WON'T WORK
        }
    }
    if(global.in_p[? gkeys.cw])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        canMove = true;
        failed = false;
        
        for(i = 0; i &lt; 4; i++)
        {
            oldX[i] = segments[i].x;
            oldY[i] = segments[i].y;
        }
    
        //LONG ROTATION RULES   
        if(type == "long")
        {
            if( rot == 0 or rot == 180 ) //To horizontal
            {
                segments[0].x = segments[2].x - 2;
                segments[0].y = segments[2].y; 
                segments[1].x = segments[2].x - 1;
                segments[1].y = segments[2].y;
                segments[3].x = segments[2].x + 1;
                segments[3].y = segments[2].y;
                
                good[3] = true;
                good[2] = true;
                good[1] = true;
                good[0] = true;
                
                
                for(i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x  &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE ) 
                    { 
                        good[i] = false; 
                        failed = true;
                    } 
                    else if(segments[i].y  &gt;= global.BLOCKS_TALL+4 )
                    {
                        good[i] = false;
                        failed = true;
                    }
                    else
                    {
                        var _hit = global.segArr[segments[i].x, segments[i].y];
                        if(_hit != noone and _hit.parent != id)
                        { 
                            good[i] = false; 
                            failed = true;
                        }
                    }
                }
                
                if(!failed)
                {
                    rot += 90;
                    if(rot &gt;= 360) { rot = 0; }   
                }
                else
                {
                    if(!good[0] and good[1] and good[2] and good[3]) //XOOO
                    {
                        if( segments[3].x + 1 &lt; global.BLOCKS_WIDE )
                        {
                            var p1 = global.segArr[segments[3].x + 1, segments[3].y];
                            if(p1 == noone or p1.parent == id)
                            {
                                failed = false; 
                                
                                segments[0].x++;
                                segments[1].x++;
                                segments[2].x++;
                                segments[3].x++;
                            }
                        }
                    }
                    else if(good[0] and good[1] and good[2] and !good[3]) //OOOX
                    {
                        if( segments[0].x &gt; 0 )
                        
                        {
                            var p1 = global.segArr[segments[0].x-1, segments[0].y];
                            if(p1 == noone or p1.parent == id)
                            {
                                failed = false; 
                                
                                segments[0].x--;
                                segments[1].x--;
                                segments[2].x--;
                                segments[3].x--;
                            }
                        }
                    }
                    else if(!good[1] and good[2] and good[3]) //_XOO
                    {
                        if( segments[3].x + 2 &lt; global.BLOCKS_WIDE )
                        {
                            var p1 = global.segArr[segments[3].x + 1, segments[3].y];
                            var p2 = global.segArr[segments[3].x + 2, segments[3].y];
                            if((p1 == noone or p1.parent == id) and (p2 == noone or p2.parent == id))
                            {
                                failed = false; 
                                
                                segments[0].x += 2;
                                segments[1].x += 2;
                                segments[2].x += 2;
                                segments[3].x += 2;
                            }
                        }
                    }
                    else if(good[0] and good[1] and !good[2]) //OOX_
                    {
                        if( segments[3].x - SEGMENT_SIZE &gt; 0 ) 
                        {
                            var p1 = global.segArr[segments[0].x - 1, segments[3].y];
                            var p2 = global.segArr[segments[0].x - 2, segments[3].y];
                            if( (p1 == noone or p1.parent == id) and (p2 == noone or p2.parent == id) ) 
                            {
                                failed = false; 
                                
                                segments[0].x -= 2;
                                segments[1].x -= 2;
                                segments[2].x -= 2;
                                segments[3].x -= 2;
                            }
                        }
                    }
                    
                    if(!failed)
                    {
                        rot += 90;
                        if(rot &gt;= 360) { rot = 0; }  
                    }
                    else
                    {
                        for(i = 0; i &lt; 4; i++)
                        {
                            segments[i].x = oldX[i];
                            segments[i].y = oldY[i];
                        }
                    }
                }
            }
            else if( rot == 90 or rot == 270 ) //To vertical 
            {
                segments[0].x = segments[2].x;
                segments[0].y = segments[2].y + 2;
                segments[1].x = segments[2].x;
                segments[1].y = segments[2].y + 1;
                segments[3].x = segments[2].x;
                segments[3].y = segments[2].y - 1;
                
                good[3] = true;
                good[2] = true;
                good[1] = true;
                good[0] = true;
                
                
                for(i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE ) 
                    { 
                        good[i] = false; 
                        failed = true;
                    } 
                    else if(segments[i].y &gt;= global.BLOCKS_TALL+4 )
                    {
                        good[i] = false;
                        failed = true;
                    }
                    else
                    {
                        var _hit = global.segArr[segments[i].x, segments[i].y];
                        if( _hit != noone and _hit.parent != id )
                        { 
                            good[i] = false; 
                            failed = true;
                        }
                    }
                }
                
                if(!failed)
                {
                    rot += 90;
                    if(rot &gt;= 360) { rot = 0; }  
                }
                else
                {
                    //O
                    //O
                    //O
                    //X
                    if(!good[0] and good[1] and good[2] and good[3]) 
                    {
                        if(segments[3].y - 1 &gt;= 0)
                        {
                            var p1 = global.segArr[segments[3].x, segments[3].y-1];
                            if(p1 == noone or p1.parent == id)
                            {
                                failed = false; 
                                
                                segments[0].y--;
                                segments[1].y--;
                                segments[2].y--;
                                segments[3].y--;
                            }
                        }
                    }
                    //X
                    //O
                    //O
                    //O
                    else if(good[0] and good[1] and good[2] and !good[3]) 
                    {
                        if(segments[0].y + 1 &lt; global.BLOCKS_TALL + 4)
                        {
                            var p1 = global.segArr[segments[0].x, segments[0].y+1];
                            if(p1 == noone or p1.parent == id)
                            {
                                failed = false; 
                                
                                segments[0].y++;
                                segments[1].y++;
                                segments[2].y++;
                                segments[3].y++;
                            }
                        }
                    }
                    //O
                    //O
                    //X
                    //_
                    else if(!good[1] and good[2] and good[3])
                    {
                        if(segments[3].y - 2 &gt;= 0)
                        {
                            var p1 = global.segArr[segments[3].x, segments[3].y-1];
                            var p2 = global.segArr[segments[3].x, segments[3].y-2];
                            if( (p1 == noone or p1.parent == id) and (p2 == noone or p2.parent == id) ) 
                            {
                                failed = false; 
                                
                                segments[0].y -= 2;
                                segments[1].y -= 2;
                                segments[2].y -= 2;
                                segments[3].y -= 2;
                            }
                        }
                    }
                    //_
                    //X
                    //O
                    //O
                    else if(good[0] and good[1] and !good[2])
                    {
                        if(segments[0].y + 2 &lt; global.BLOCKS_TALL + 4)
                        {
                            var p1 = global.segArr[segments[0].x, segments[0].y + 1];
                            var p2 = global.segArr[segments[0].x, segments[0].y + 2];
                            if( (p1 == noone or p1.parent == id) and (p2 == noone or p2.parent == id) ) 
                            {
                                failed = false; 
                                
                                segments[0].y += 2;
                                segments[1].y += 2;
                                segments[2].y += 2;
                                segments[3].y += 2;
                            }
                        }
                    }
                    if(!failed)
                    {
                        rot += 90;
                        if(rot &gt;= 360) { rot = 0; }  
                    }
                    else
                    {
                        for(i = 0; i &lt; 4; i++)
                        {
                            segments[i].x = oldX[i];
                            segments[i].y = oldY[i];
                        }
                    }
                }
            }
        }
        else
        {
            //else if (type == "square")
            //{
            //    //show_debug_message("HURR.")
            //}
            //else
            if(type = "l")
            {   
                if (rot == 0 ) //Flat at bottom to flat at left
                {   
                    segments[3].x = segments[2].x + 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x - 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y + 1;
                }
                else if (rot == 90) //Flat at left to top
                {   
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y + 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y - 1;
                    segments[0].x = segments[1].x - 1;
                    segments[0].y = segments[1].y;
                } 
                else if ( rot == 180 ) //Flat at top to flat at right   
                {   
                    segments[2].y++;
                    segments[3].x = segments[2].x - 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x + 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y - 1;
                }
                else if ( rot == 270 ) //Flat at right to bottom
                {   
                    segments[2].y--;
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y - 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y + 1;
                    segments[0].x = segments[1].x + 1;
                    segments[0].y = segments[1].y;
                }  
            }
            
            //J AKA RL ROTATION RULES
            else if(type = "rl")
            {   
                if ( rot == 0 ) //Flat at bottom to left
                {
                    segments[2].y++;
                    segments[3].x = segments[2].x + 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x - 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y - 1;
                }
                else if ( rot == 90 ) //Flat at left to top
                {
                    segments[2].y--;
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y + 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y - 1;
                    segments[0].x = segments[1].x + 1;
                    segments[0].y = segments[1].y;
                }
                else if ( rot == 180 ) //Flat at top to flat at right   
                {
                    segments[3].x = segments[2].x - 1;
                    segments[3].y = segments[2].y;
                    segments[1].x = segments[2].x + 1;
                    segments[1].y = segments[2].y;
                    segments[0].x = segments[1].x;
                    segments[0].y = segments[1].y + 1;
                }
                else if (rot == 270) //Flat at right to bottom
                {
                    segments[3].x = segments[2].x;
                    segments[3].y = segments[2].y - 1;
                    segments[1].x = segments[2].x;
                    segments[1].y = segments[2].y + 1;
                    segments[0].x = segments[1].x - 1;
                    segments[0].y = segments[1].y;
                }
            }
            else if(type = "t")
            {
                if (rot == 0 ) //Down to left
                {
                    segments[1].x = segments[0].x;
                    segments[1].y = segments[0].y - 1;
                    segments[2].x = segments[0].x - 1;
                    segments[2].y = segments[0].y;
                    segments[3].x = segments[0].x;
                    segments[3].y = segments[0].y + 1;
                }
                else if ( rot == 90 ) //Left to up
                {
                    segments[0].y++;
                    segments[1].x = segments[0].x + 1;
                    segments[1].y = segments[0].y;
                    segments[2].x = segments[0].x;
                    segments[2].y = segments[0].y - 1;
                    segments[3].x = segments[0].x - 1;
                    segments[3].y = segments[0].y;
                }
                else if ( rot == 180 ) //Up to right
                {
                    segments[0].y--;
                    segments[1].x = segments[0].x;
                    segments[1].y = segments[0].y + 1;
                    segments[2].x = segments[0].x + 1;
                    segments[2].y = segments[0].y;
                    segments[3].x = segments[0].x;
                    segments[3].y = segments[0].y - 1;
                }
                else if (rot == 270) //Right to down
                {
                    segments[1].x = segments[0].x - 1;
                    segments[1].y = segments[0].y;
                    segments[2].x = segments[0].x;
                    segments[2].y = segments[0].y + 1;
                    segments[3].x = segments[0].x + 1;
                    segments[3].y = segments[0].y;
                }
            }
            else if ( type == "s" ) 
            {
                if(rot == 180 or rot == 0) // s to steps down right
                {
                    segments[0].y -= 2;
                    segments[1].x--;
                    segments[1].y--;
                    segments[3].x--;
                    segments[3].y++;
                }
                else if (rot == 270 or rot == 90) //steps down right to s 
                {
                    segments[0].y += 2;
                    segments[1].x++;
                    segments[1].y++;
                    segments[3].x++;
                    segments[3].y--;
                }  
            }
            else if ( type == "z" ) 
            {
                if(rot == 180 or rot == 0) // z to steps down left
                {
                    segments[0].x += 2;
                    segments[0].y--;
                    segments[1].x++;
                    segments[2].y--;
                    segments[3].x--;
                }
                else if (rot == 270 or rot == 90) //steps down left to z 
                {
                    segments[0].x -= 2;
                    segments[0].y++;
                    segments[1].x--;
                    segments[2].y++;
                    segments[3].x++;
                }  
            }
            
            for(i = 0; i &lt; 4; i++)
            {
                if( segments[i].x &lt; 0 or segments[i].x &gt;= global.BLOCKS_WIDE ) { failed = true; } 
                else if ( segments[i].y &gt;= global.BLOCKS_TALL+4 ) { failed = true; }
                else 
                {
                    var _hit = global.segArr[segments[i].x, segments[i].y];
                    if ( _hit != noone and _hit.parent != id ) 
                        { failed = true; }
                }
            }
            
            if(!failed)
            {
                rot += 90;
                if(rot &gt;= 360) { rot = 0; }  
            }
            else
            {
                //Bump right
                good = true
                for(i = 0; i &lt; 4; i++)
                {
                    if(segments[i].x + 1 &gt;= global.BLOCKS_WIDE) { good = false; }
                    else if(segments[i].x + 1 &lt; 0) { good = false; }
                    else if ( segments[i].y &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                    else
                    {
                        var p1 = global.segArr[segments[i].x+1, segments[i].y];
                        if(p1 != noone and p1.parent != id)
                            { good = false; }
                    }
                    if(!good) { i = 5; }
                }
                if(good)
                {
                    failed = false;
                    
                    segments[0].x++;
                    segments[1].x++;
                    segments[2].x++;
                    segments[3].x++;
                }
                else
                {
                    //Bump left
                    good = true;
                    for(i = 0; i &lt; 4; i++)
                    {
                        if(segments[i].x  - 1 &gt;= global.BLOCKS_WIDE) { good = false; }
                        else if(segments[i].x  - 1 &lt; 0) { good = false; }
                        else if ( segments[i].y  &gt;= global.BLOCKS_TALL+4  ) { good = false; }
                        else
                        {
                            var p1 = global.segArr[segments[i].x - 1, segments[i].y];
                            if(p1 != noone and p1.parent != id)
                                { good = false; }
                        }
                        if(!good) { i = 5; }
                    }
                    if(good)
                    {
                        failed = false;
                        
                        segments[0].x--;
                        segments[1].x--;
                        segments[2].x--;
                        segments[3].x--;
                    }
                    else
                    {
                        //Bump down
                        good = true;
                        for(i = 0; i &lt; 4; i++)
                        {
                            if(segments[i].x &gt;= global.BLOCKS_WIDE) { good = false; }
                            else if(segments[i].x  &lt; 0) { good = false; }
                            else if ( segments[i].y + 1 &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                            else
                            {
                                var p1 = global.segArr[segments[i].x , segments[i].y + 1];
                                if(p1 != noone and p1.parent != id)
                                    { good = false; }
                            }
                            if(!good) { i = 5; }
                        }
                        if(good)
                        {
                            failed = false;
                            
                            segments[0].y++;
                            segments[1].y++;
                            segments[2].y++;
                            segments[3].y++;
                        }
                        else
                        {
                            //Bump up
                            good = true;
                            for(i = 0; i &lt; 4; i++)
                            { 
                                if(segments[i].x &gt;= global.BLOCKS_WIDE) { good = false; }
                                else if(segments[i].x &lt; 0) { good = false; }
                                else if ( segments[i].y - 1 &gt;= global.BLOCKS_TALL+4 ) { good = false; }
                                else
                                {
                                    var p1 = global.segArr[segments[i].x, segments[i].y - 1];
                                    if(p1 != noone and p1.parent != id)
                                        { good = false; }
                                }
                                if(!good) { i = 5; }
                            }
                            if(good)
                            {
                                failed = false;
                            
                                segments[0].y--;
                                segments[1].y--;
                                segments[2].y--;
                                segments[3].y--;
                            }
                        }
                    }   
                }
                if(!failed)
                {
                    rot += 90;
                    if(rot &gt;= 360) { rot = 0; }  
                }
            }
        }
        
        if(failed)
        {
            segments[0].x = oldX[0];
            segments[1].x = oldX[1];
            segments[2].x = oldX[2];
            segments[3].x = oldX[3];
            segments[0].y = oldY[0];
            segments[1].y = oldY[1];
            segments[2].y = oldY[2];
            segments[3].y = oldY[3];
        }
        else
        {
            if(canFall == true) { rotationTimer = -1; }
            else { rotationTimer = global.SOLIDIFY_TIME*global.ROTATION_SOLIDIFY_MODIFIER; }
            updateGhost();
        }
    }
    
    if(global.in[? gkeys.sd]) { speeding = global.SOFT_DROP_SPEED; }
    else { speeding = 0; }

    if(falling) { IG += (global.fallSpeed+speeding)*delta_time/1000000*60; }
    else { IG = 0; }
    print("FALL SPEED: " + string(global.fallSpeed));
    if(IG &gt; 1)
    {    
        var amt = floor(IG);
        var hit = true; //false;
        
        for(var i = 0; i &lt; 4; i++) //For each segment
        {   
            var this_x = segments[i].x;
            var j = 0;
            for(j = segments[i].y + 1; j &lt;= segments[i].y+amt and j &lt; global.BLOCKS_TALL+4; j++) //For each height
            {
                var _obj = global.segArr[this_x, j];
                if(_obj != noone and _obj.parent != id)
                {
                    if(j - segments[i].y - 1 &lt; amt) { amt = j - segments[i].y - 1; }
                    break;
                }
            }
            if(j &gt;= global.BLOCKS_TALL+4)
            {
                if(j - segments[i].y - 1 &lt; amt) { amt = global.BLOCKS_TALL+4 - segments[i].y - 1; }
            }
        }
        
        if(!hit) 
        { 
            for(var i = 0; i &lt; 4; i++) { segments[i].y += amt; }
        }
        else 
        {
            if( nonmovementTimer == -1 ) { nonmovementTimer = global.SOLIDIFY_TIME; }
            if( rotationTimer == -1 ) { rotationTimer = global.SOLIDIFY_TIME*global.ROTATION_SOLIDIFY_MODIFIER; }
            if( fallingTimer == -1 ) { fallingTimer = global.SOLIDIFY_TIME*global.FALLING_SOLIDIFY_MODIFIER; }
            for(var i = 0; i &lt; 4; i++) { segments[i].y += amt; }  
        }  
        
        if( global.in[? gkeys.sd] )
        {
            global.points += amt;
        }
        IG -= amt;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling time limit
nonmovementTimer = -1;
rotationTimer = -1;
solidify(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotation time limit 
nonmovementTimer = -1;
fallingTimer = -1;
solidify(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide
sliderTimer = autoIncSpeed;

if(slideDir == "l" or slideDir == "r") 
{  
    if(nonmovementTimer != -1) 
    { nonmovementTimer = global.timeToMove; }
    
    canMove = true;
    if(moving)
    {
        if(slideDir == "l")
        {
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x - 1 &lt; 0 )
                {
                    canMove = false; 
                    break;
                }
                else
                {
                    var _hit = global.segArr[segments[i].x-1, segments[i].y];
                    if(_hit != noone and _hit.parent != id)
                    {
                        canMove = false;
                        break;
                    }
                }
            }
        }
        else if(slideDir == "r")
        {
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x + 1 &gt;= global.BLOCKS_WIDE )
                {
                    canMove = false; 
                    break;
                }
                else
                {
                    var _hit = global.segArr[segments[i].x+1, segments[i].y];
                    if(_hit != noone and _hit.parent != id)
                    {
                        canMove = false;
                        break;
                    }
                }
            }
        }
                
        if(canMove)
        {
            var snd = audio_play_sound(snd_tick, 10, false);
            audio_sound_gain(snd, global.sfx_level/100, 0);
            if(slideDir == "l") { for(var i = 0; i &lt; 4; i++) { segments[i].x--; } }
            else if(slideDir == "r") { for(var i = 0; i &lt; 4; i++) { segments[i].x++; } }
            updateGhost();
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Non-movement time limit
rotationTimer = -1;
fallingTimer = -1;
solidify(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare surface
if(!surface_exists(surf)) { surface_create_log(4*global.segmentSize, 4*global.segmentSize); }
surface_set_target(surf);
draw_clear_alpha(c_black, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEPRECATED (NOW HANDLED BY CONTROL)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
