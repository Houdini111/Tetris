<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SEGMENT_SIZE = global.segmentSize; //Local Copy

surf = surface_create_log(4*global.segmentSize, 4*global.segmentSize);

falling = true;
canFall = false;
moving = true;
type = "";
rot = 0;
IG = 0;
swapped = false;
speeding = 1;
SOFT_DROP_SPEED = global.SOFT_DROP_SPEED; //Local copy

m_b_a = global.MOVING_COLOR_BLEND_AMT; //Local copy
g_b_a = global.GHOST_BLEND_AMT; //Local copy

autoIncDelay = 10/60; //10 frames before framerate changes
autoIncSpeed = 3/60; //3 frame of delay (before framerate changes) between moves
slideDir = " ";

nonmovementTimer = -1; 
sliderTimer = -1;
rotationTimer = -1; 
fallingTimer = -1; 

if(global.rand_method == "Full")
{
    if(global.control.type == " ") 
    { 
        type = global.control.preview[0];
        for(i = 0; i &lt; global.previewCount-1; i++)
            { global.control.preview[i] = global.control.preview[i+1]; }
        global.control.preview[global.previewCount-1] = choose("long", "square", "s", "z", "l", "rl", "t"); 
    } 
    else 
    { 
        type = global.control.type; 
        global.control.type = " ";
    } 
}
else if(global.rand_method == "Bag")
{
    refresh_bag();
    if(global.control.type == " ")
    {
        type = global.bag[|0];
        shift_list_left(global.bag, 1);
        if( ds_list_size(global.bag) &lt; global.previewCount ) { refresh_bag(); }
    }
    else
    {
        type = global.control.type;
        global.control.type = " ";
    }
}
//type = "t";
rot = 0;

x = 3;
y = 4;
if(type == "i")
{
    c = global.lBlue;
}
else if(type == "o")
{
    x = 4; //Square's left-most segment is one further right than the rest

    c = global.yellow;
}
else if(type == "s")
{
    c = global.green;
}
else if(type == "z")
{
    c = global.red;
}
else if(type == "l")
{   
    c = global.orange;
}
else if(type == "j")
{
    c = global.dBlue;
}
else if(type == "t")
{
    c = global.magenta; 
}

m_c = merge_color(c, c_white, m_b_a); //Moving color
g_c = merge_color(c, c_white, g_b_a); //Ghost color

segments[0] = instance_create(0, 0, obj_segment);
segments[1] = instance_create(0, 0, obj_segment);
segments[2] = instance_create(0, 0, obj_segment);    
segments[3] = instance_create(0, 0, obj_segment);

update_segment_offsets();
update_segments();

ghostX = x;
ghostY = y;

for(i = 0; i &lt; 4; i++)
{
    ghosts[i] = instance_create(segments[i].x, segments[i].y, obj_ghostSeg);
    
    segments[i].parent = id;
    ghosts[i].parent = id;
    
    segments[i].color = c;
    ghosts[i].color = g_c; 
    
    segments[i].active_color = m_c;
}

//LOSS CHECK
for(var i = 0; i &lt; 4; i++)
{
    if(global.segArr[segments[i].x, segments[i].y] != noone)
    {
        print("YOU LOST");
        instance_activate_object(global.menu);
        with(global.menu)
        {
            transition_to_room(rm_main_menu);
        }
        audio_stop_sound(global.control.music);
    }
}

height = room_height; //The starting height for the ghosts search
inc = global.segmentSize;

updateGhost();

if(keyboard_check(vk_left)) 
{
    sliderTimer = autoIncSpeed;
    slideDir = "l";
}
else if(keyboard_check(vk_right)) 
{
    sliderTimer = autoIncSpeed;
    slideDir = "r";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean ghosts
instance_destroy(ghosts[0]);
instance_destroy(ghosts[1]);
instance_destroy(ghosts[2]);
instance_destroy(ghosts[3]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//First set of actions (things that would cause solidification)
if(global.active == id and !global.paused)
{  
    //HARD DROP
    if(global.hardDrop and global.in_p[? gkeys.hd])
    {
        var yDiff = global.BLOCKS_TALL+4;
        
        for(var i = 0; i &lt; 4; i++) 
        { 
            var this_x = segments[i].x
            for(var h = segments[i].y; h &lt; global.BLOCKS_TALL+4; h++)
            {
                var hit = global.segArr[this_x, h];
                if(hit != noone and hit.parent != id)
                {
                    if(h - segments[i].y - 1 &lt; yDiff) { yDiff = h - segments[i].y - 1; }
                    break;
                }
               
            }
            if(h &gt;= global.BLOCKS_TALL+4)
            {
                if(h - segments[i].y - 1 &lt; yDiff) { yDiff = global.BLOCKS_TALL+4 - segments[i].y - 1; }
            }
        }
        for(i = 0; i &lt; 4; i++) { segments[i].y  += yDiff; }
        
        global.points += (yDiff*2);
        
        var snd = audio_play_sound(snd_harddrop, 10, false);
        audio_sound_gain(snd, global.sfx_level/100, 0);
        solidify(id);
    }

    if(sliderTimer &gt; -1) { sliderTimer -= delta_time/1000000; }
    if(nonmovementTimer &gt; -1) { nonmovementTimer -= delta_time/1000000; }
    if(rotationTimer &gt; -1) { rotationTimer -= delta_time/1000000; }
    if(fallingTimer &gt; -1) { fallingTimer -= delta_time/1000000; }
    
    if(sliderTimer &lt;= 0 and sliderTimer != -1)  { event_user(1); }
    if(nonmovementTimer &lt;= 0 and nonmovementTimer != -1)  { event_user(0);}
    if(rotationTimer &lt;= 0 and rotationTimer != -1)  { event_user(2); }
    if(fallingTimer &lt;= 0 and fallingTimer != -1)  { event_user(3); } 
    
}
//If it didn't solidify, apply next movement options
if(global.active == id and !global.paused) //Recheck to make sure that it is still good
{
    //FALL CHECK
    var canFall = true;   
    
    if(y &gt;= room_height)
    { 
        y = room_height;
        canFall = false; 
    }
    else
    {
        for(i = 0; i &lt; 4; i++)    
        {
            if( segments[i].y+1 &gt;= global.BLOCKS_TALL+4) //+4 to handle pieces off the top
            {
                canFall = false;
                break;
            }
            else
            {
                var _hit = global.segArr[segments[i].x, segments[i].y+1];
                if( _hit != noone and _hit.parent != id )
                { 
                    canFall = false;
                    break;
                }
            }
        }
    }
    
    if ( canFall )
    {
        falling = true;
        nonmovementTimer = -1 
        rotationTimer = -1;
        fallingTimer = -1;
    }
    else
    {
        falling = false;
        if( nonmovementTimer == -1 ) { nonmovementTimer = global.SOLIDIFY_TIME; }
        if( rotationTimer == -1 ) { rotationTimer = global.SOLIDIFY_TIME*global.ROTATION_SOLIDIFY_MODIFIER; } 
        if( fallingTimer == -1 ) { fallingTimer = global.SOLIDIFY_TIME*global.FALLING_SOLIDIFY_MODIFIER; }       if( fallingTimer == -1 ) { fallingTimer = global.SOLIDIFY_TIME*global.FALLING_SOLIDIFY_MODIFIER;  }
    }

    //RELEASE CHECKS
    if(!global.in[? gkeys.right] and !global.in[? gkeys.left]) 
    { 
        slideDir = " ";
        slideTimer = -1;
    }
    
    //PRESS CHECKS
    if(global.in_p[? gkeys.right])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        if(global.active == id)
        {   
            canMove = true;
            if(moving)
            {
                for(var i = 0; i &lt; 4; i++)
                {
                    if( segments[i].x+1 &gt;= global.BLOCKS_WIDE )
                    {
                        canMove = false; 
                        break;
                    }
                    else if(global.segArr[segments[i].x+1, segments[i].y] != noone)
                    {
                        if(global.segArr[segments[i].x+1, segments[i].y].parent != id)
                        {
                            canMove = false;
                            break;
                        }
                    }
                }
                
                if(canMove)
                {
                    var snd = audio_play_sound(snd_tick, 10, false);
                    audio_sound_gain(snd, global.sfx_level/100, 0);
                    x++;
                    update_segments();
                    updateGhost();
                }
            }  
            
            sliderTimer = autoIncDelay;
            slideDir = "r";
        }
    }
    if(global.in_p[? gkeys.left])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        canMove = true;
        if(moving)
        {
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x &lt;= 0 )
                {
                    canMove = false; 
                    break;
                }
                else if(global.segArr[segments[i].x-1, segments[i].y] != noone)
                {
                    if(global.segArr[segments[i].x-1, segments[i].y].parent != id)
                    {
                        canMove = false;
                        break;
                    }
                }
            }
            
            if(canMove)
            {
                var snd = audio_play_sound(snd_tick, 10, false);
                audio_sound_gain(snd, global.sfx_level/100, 0);
                x--;
                update_segments();
                updateGhost();
            }
        } 
        
        sliderTimer = autoIncDelay;
        slideDir = "l";
    }
    
    //ROTATE
    if(global.in_p[? gkeys.ccw] || global.in_p[? gkeys.cw])
    {
        if(nonmovementTimer != -1) 
        { nonmovementTimer = global.timeToMove; }
        
        canMove = true;
        failed = false;
        oldX[0] = 0; //declare
        oldY[0] = 0;
        oldRot = rot;
        
        for(i = 0; i &lt; 4; i++)
        {
            oldX[i] = segments[i].x;
            oldY[i] = segments[i].y;
        }
        
        
        if(type != "o")
        {
            if(global.in_p[? gkeys.cw])
            {
                rot += 90;
                if(rot &gt;= 360) { rot -= 360; }
            }
            else if(global.in_p[? gkeys.ccw])
            {
                rot -= 90;
                if(rot &lt; 0) { rot += 360; }
            }
            
            update_segment_offsets();
            update_segments();
            
            var kickSet = global.kick_rule;
            var successfulKick = false;
            if(kickSet == "SRS")
            {
                if(type == "j" || type == "l" || type == "s" || type == "t" || type == "z")
                {
                    successfulKick = srs_jlstz_kick();
                }
                else if(type == "i") 
                {
                    successfulKick = srs_i_kick();
                }
            }
            
            if(!successfulKick)
            {
                rot = oldRot;
                update_segment_offsets();
                update_segments(); 
            }
            else 
            {
                update_segments(); 
                updateGhost();
            }
        }
    }
    
    if(global.in[? gkeys.sd]) { speeding = global.SOFT_DROP_SPEED; }
    else { speeding = 0; }

    if(falling) { IG += (global.fallSpeed+speeding)*delta_time/1000000*60; }
    else { IG = 0; }
    
    if(IG &gt; 1)
    {    
        var amt = floor(IG);
        var hit = true; //false;
        
        for(var i = 0; i &lt; 4; i++) //For each segment
        {   
            var this_x = segments[i].x;
            var j = 0;
            for(j = segments[i].y + 1; j &lt;= segments[i].y+amt and j &lt; global.BLOCKS_TALL+4; j++) //For each height
            {
                var _obj = global.segArr[this_x, j];
                if(_obj != noone and _obj.parent != id)
                {
                    if(j - segments[i].y - 1 &lt; amt) { amt = j - segments[i].y - 1; }
                    break;
                }
            }
            if(j &gt;= global.BLOCKS_TALL+4)
            {
                if(j - segments[i].y - 1 &lt; amt) { amt = global.BLOCKS_TALL+4 - segments[i].y - 1; }
            }
        }
        
        if(hit) 
        {
            if( nonmovementTimer == -1 ) { nonmovementTimer = global.SOLIDIFY_TIME; }
            if( rotationTimer == -1 ) { rotationTimer = global.SOLIDIFY_TIME*global.ROTATION_SOLIDIFY_MODIFIER; }
            if( fallingTimer == -1 ) { fallingTimer = global.SOLIDIFY_TIME*global.FALLING_SOLIDIFY_MODIFIER; }
        }  
        
        y += amt;
        IG -= amt;
        update_segments();
        
        if( global.in[? gkeys.sd] )
        {
            global.points += amt;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling time limit
nonmovementTimer = -1;
rotationTimer = -1;
solidify(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotation time limit 
nonmovementTimer = -1;
fallingTimer = -1;
solidify(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide
sliderTimer = autoIncSpeed;

if(slideDir == "l" or slideDir == "r") 
{  
    if(nonmovementTimer != -1) 
    { nonmovementTimer = global.timeToMove; }
    
    canMove = true;
    if(moving)
    {
        if(slideDir == "l")
        {
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x - 1 &lt; 0 )
                {
                    canMove = false; 
                    break;
                }
                else
                {
                    var _hit = global.segArr[segments[i].x-1, segments[i].y];
                    if(_hit != noone and _hit.parent != id)
                    {
                        canMove = false;
                        break;
                    }
                }
            }
        }
        else if(slideDir == "r")
        {
            for(var i = 0; i &lt; 4; i++)
            {
                if( segments[i].x + 1 &gt;= global.BLOCKS_WIDE )
                {
                    canMove = false; 
                    break;
                }
                else
                {
                    var _hit = global.segArr[segments[i].x+1, segments[i].y];
                    if(_hit != noone and _hit.parent != id)
                    {
                        canMove = false;
                        break;
                    }
                }
            }
        }
                
        if(canMove)
        {
            var snd = audio_play_sound(snd_tick, 10, false);
            audio_sound_gain(snd, global.sfx_level/100, 0);
            //if(slideDir == "l") { for(var i = 0; i &lt; 4; i++) { segments[i].x--; } }
            //else if(slideDir == "r") { for(var i = 0; i &lt; 4; i++) { segments[i].x++; } }
            if(slideDir == "l") { x--; }
            else if(slideDir == "r") { x++; } 
            update_segments();
            updateGhost();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Non-movement time limit
rotationTimer = -1;
fallingTimer = -1;
solidify(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare surface
if(!surface_exists(surf)) { surface_create_log(4*global.segmentSize, 4*global.segmentSize); }
surface_set_target(surf);
draw_clear_alpha(c_black, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEPRECATED (NOW HANDLED BY SEGMENTS AND CONTROL)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
