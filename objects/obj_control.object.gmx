<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.control = id;

clearStaticSurf = false;

var segSurf = surface_create_log(global.segmentSize, global.segmentSize);
surface_set_target(segSurf);
draw_clear(c_white);
surface_reset_target();
segmentSprite = sprite_create_from_surface(segSurf, 0, 0, global.segmentSize, global.segmentSize, false, false, 0, global.segmentSize);
sprite_collision_mask(segmentSprite, false, 1, 0, 0, 0, 0, 1, 0);
surface_free(segSurf);

average_fps = fps_real;
benchmark = false;
if(benchmark) { frames = ds_list_create(); }

UI_WIDTH = global.UI_PIXEL_WIDTH; //Local copy of ui_width;
WINDOW_WIDTH = global.WINDOW_WIDTH;
WINDOW_HEIGHT = global.WINDOW_HEIGHT;
Y_PADDING = (WINDOW_HEIGHT - (global.BLOCKS_TALL * global.segmentSize))/2;

global.hardDrop = true;
global.SOFT_DROP_SPEED = 0.15;
global.pieceC = 0;
global.canSpawnNew = true;

hardDropTimer = -1;
spawnPieceTimer = -1;
clearDelayTimer = -1;

global.clear_surf = surface_create_log(room_width, room_height);
global.clearedLines = ds_list_create();

global.clear_part_system = part_system_create();
part_system_automatic_draw(global.clear_part_system, false);
global.clear_part = part_type_create();
part_type_shape(global.clear_part, pt_shape_disk);
part_type_size(global.clear_part, .05, .1, 0, 0);
part_type_colour2(global.clear_part, c_white, c_black);
part_type_speed(global.clear_part, 1*room_speed/60, 2*room_speed/60, 0, 0);
part_type_direction(global.clear_part, 0, 360, 0, 0);
part_type_gravity(global.clear_part, 0.30*room_speed/60, 270);
part_type_life(global.clear_part, room_speed*1, room_speed*2);

if(global.level_mode == LEVEL_MODES.TGM)
{
    global.level = 0;
    for(i = 0; i &lt;= 500; ++i)
    {
        if( i &lt; 30 and i &gt;= 0 ) { global.levels[i] = 4; }
        else if( i &lt; 35 and i &gt;= 30 ) { global.levels[i] = 6; }
        else if( i &lt; 40 and i &gt;= 35 ) { global.levels[i] = 8; }
        else if( i &lt; 50 and i &gt;= 40 ) { global.levels[i] = 8; }
        else if( i &lt; 60 and i &gt;= 50 ) { global.levels[i] = 10; }
        else if( i &lt; 70 and i &gt;= 60 ) { global.levels[i] = 12; }
        else if( i &lt; 80 and i &gt;= 70 ) { global.levels[i] = 16; }
        else if( i &lt; 90 and i &gt;= 80 ) { global.levels[i] = 32; }
        else if( i &lt; 100 and i &gt;= 90 ) { global.levels[i] = 48; }
        else if( i &lt; 120 and i &gt;= 100 ) { global.levels[i] = 64; }
        else if( i &lt; 140 and i &gt;= 120 ) { global.levels[i] = 80; }
        else if( i &lt; 160 and i &gt;= 140 ) { global.levels[i] = 96; }
        else if( i &lt; 170 and i &gt;= 160 ) { global.levels[i] = 112; }
        else if( i &lt; 200 and i &gt;= 170 ) { global.levels[i] = 128; }
        else if( i &lt; 220 and i &gt;= 200 ) { global.levels[i] = 144; }
        else if( i &lt; 230 and i &gt;= 220 ) { global.levels[i] = 4; }
        else if( i &lt; 233 and i &gt;= 230 ) { global.levels[i] = 32; }
        else if( i &lt; 236 and i &gt;= 233 ) { global.levels[i] = 64; }
        else if( i &lt; 239 and i &gt;= 236 ) { global.levels[i] = 128; }
        else if( i &lt; 243 and i &gt;= 239 ) { global.levels[i] = 160; }
        else if( i &lt; 247 and i &gt;= 243 ) { global.levels[i] = 192; }
        else if( i &lt; 251 and i &gt;= 247 ) { global.levels[i] = 224; }
        else if( i &lt; 300 and i &gt;= 251 ) { global.levels[i] = 256; }
        else if( i &lt; 330 and i &gt;= 300 ) { global.levels[i] = 512; }
        else if( i &lt; 360 and i &gt;= 330 ) { global.levels[i] = 768; }
        else if( i &lt; 400 and i &gt;= 360 ) { global.levels[i] = 1024; }
        else if( i &lt; 420 and i &gt;= 400 ) { global.levels[i] = 1280; }
        else if( i &lt; 450 and i &gt;= 420 ) { global.levels[i] = 1024; }
        else if( i &lt; 500 and i &gt;= 450 ) { global.levels[i] = 768; }
        else if( i == 500 ) { global.levels[i] = 5120; }
    }
    global.fallSpeed = 4/256; //IGs (256 == 1G == 1 segment per frame at 60FPS)
}
else if(global.level_mode == LEVEL_MODES.STANDARD)
{
    global.level = 1;
    global.fallSpeed = 1/60;
}

global.lines = 0;


//global.previewCount = 3;
preview_padded = 50;
//global.previewCount = floor((window_get_height()-30-preview_padded)/preview_padded);
global.previewCount = 3;

global.timeToMove = room_speed/60;

global.hold = " ";
type = " ";
canSwap = true;

randomize();

global.piece_list = ds_list_create();
ds_list_add(global.piece_list, "i");
ds_list_add(global.piece_list, "o");
ds_list_add(global.piece_list, "s");
ds_list_add(global.piece_list, "z");
ds_list_add(global.piece_list, "l");
ds_list_add(global.piece_list, "j");
ds_list_add(global.piece_list, "t");

if(global.rand_method == "Full")
{
    preview[0] = "";
    for(i = 0; i &lt; global.previewCount; i++)
          { preview[i] = global.piece_list[| irandom_range(0, ds_list_size(global.piece_list)-1 )] } 
}
else if(global.rand_method == "Bag")
{
    global.bag = ds_list_create();
}

global.level++;


global.music = audio_play_sound(snd_ThemeA, 100, true);
audio_sound_gain(global.music, global.music_level/100, 0);


room_surf = surface_create_log(room_width+1, room_height);

grid_surf = surface_create_log(room_width+1, room_height); 
surface_free(grid_surf); //Free so that the grid draw to create the lines will trigger


global.ghostSurf = noone;
guiSurf = noone;

for(var _x = global.BLOCKS_WIDE-1; _x &gt;= 0; _x--)
{
    for(var _y = global.BLOCKS_TALL-1+4; _y &gt;= 0; _y--) //+4 to handle pieces off the top
    {
        global.segArr[_x, _y] = noone;
    }
}

bgSurf = noone;

global.canSpawnNew = false;
global.points = 0;
global.time = 0;
global.active = instance_create(0 , 0, obj_piece);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(benchmark) { ds_list_destroy(frames); }
ds_list_destroy(global.clearedLines);
ds_list_destroy(global.peice_list);
if(global.rand_method == "Bag") { ds_list_destroy(global.bag); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>average_fps = average_fps*0.99 + fps_real*0.01;
if(benchmark) { ds_list_add(frames, delta_time); }


if(global.in_p[? mkeys.menu])
{
    ///Pause
    global.paused = !global.paused;
    
    if(global.paused)
    {
        audio_pause_sound(global.music);
        global.timer_list = ds_list_create();
        if(global.active != noone)
        {
            global.timer_list[| 0] = global.active.nonmovementTimer;
                global.active.nonmovementTimer = -1;
            global.timer_list[| 1] = global.active.sliderTimer;
                global.active.sliderTimer = -1;
            global.timer_list[| 2] = global.active.rotationTimer;
                global.active.rotationTimer = -1;
            global.timer_list[| 3] = global.active.fallingTimer;
                global.active.fallingTimer = -1;
            instance_activate_object(global.menu);   
        }
    }
    else
    {
        audio_resume_sound(global.music);
        if(global.active == noone)
        {
            global.active.nonmovementTimer = global.timer_list[| 0];
            global.active.sliderTimer = global.timer_list[| 1];
            global.active.rotationTimer = global.timer_list[| 2];
            global.active.fallingTimer = global.timer_list[| 3];
        }
        ds_list_destroy(global.timer_list);
        reset_pause();
        save_settings(true, true);
        instance_deactivate_object(global.menu);
    }
}
else if(global.in[? gkeys.hold])
{
    if(canSwap and !global.paused and global.active != noone)
    {
        canSwap = false; 
        
        if( global.hold == " ")
        {
            global.hold = global.active.type;
            
            global.active.moving = false;
            for(i = 0; i &lt; 4; i++)
            {
                instance_destroy(global.active.segments[i]);
                instance_destroy(global.active.ghosts[i]);
            }
            instance_destroy(global.active);
            
            var snd = audio_play_sound(snd_bop, 10, false);
            audio_sound_gain(snd, global.sfx_level/100, 0);
            
            //newPeice
            global.canSpawnNew = false;
            global.active = instance_create(0 , 0, obj_piece);
        }
        else 
        {
            tmp = global.hold;
            global.hold = global.active.type;
            
            global.active.moving = false;
            for(i = 0; i &lt; 4; i++)
            {
                instance_destroy(global.active.segments[i]);
                instance_destroy(global.active.ghosts[i]);
            }
            instance_destroy(global.active);
             
            global.control.type = tmp;
            
            var snd = audio_play_sound(snd_bop, 10, false);
            audio_sound_gain(snd, global.sfx_level/100, 0);
            
            //newPeice
            global.canSpawnNew = false;
            global.active = instance_create(0 , 0, obj_piece);
        }
        
        with(obj_segment) { visible = true; } 
    }
}

if(!global.hardDrop and hardDropTimer == -1) { hardDropTimer = 1/60; }
if(hardDropTimer &gt; -1) 
{ 
    hardDropTimer -= delta_time/1000000*60; 
    if(hardDropTimer &lt;= 0 and hardDropTimer != -1) 
    { 
        global.hardDrop = true; 
        hardDropTimer = -1; 
    }
}

if(!surface_exists(global.clear_surf)) { global.clear_surf = surface_create_log(room_width, room_height); } 
surface_set_target(global.clear_surf);
draw_clear_alpha(c_black, 0);
surface_reset_target();

if(!global.canSpawnNew)
{
    if(clearDelayTimer &gt; -1) 
    {
        clearDelayTimer -= delta_time/1000000*60;
        if(clearDelayTimer &lt;= 0)
        {
            instance_destroy(obj_phantomSeg);
            for(var _i = ds_list_size(global.clearedLines)-1; _i &gt;= 0; _i-- )
            {
                moveLinesDown(global.clearedLines[| _i]);
            }
            ds_list_clear(global.clearedLines);
            clearStaticSurf = true;
            /*
            if(surface_exists(global.STATIC_SEGMENT_SURFACE)) 
            { 
                surface_free(global.STATIC_SEGMENT_SURFACE); 
                with(obj_segment) { visible = true; } 
            }
            */
            clearDelayTimer = -1;
            
            global.canSpawnNew = false;
            global.active = instance_create(0 , 0, obj_piece);
        }
    }
    else if(spawnPieceTimer == -1) { spawnPieceTimer = 1/60; }
    if(spawnPieceTimer &gt; -1) 
    { 
        spawnPieceTimer -= delta_time/1000000*60; 
        if(spawnPieceTimer &lt;= 0  and spawnPieceTimer != -1) 
        { 
            global.canSpawnNew = true;
            spawnPieceTimer = -1; 
        }
    }
}
if(!global.paused) { global.time += round(delta_time/10000); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(benchmark)
{
    var f = file_text_open_write("frame_times.csv");
    for(var _i = 0; _i &lt; ds_list_size(frames) - 2; _i++)
    {
        file_text_write_string(f, string(frames[| _i]) + ", ");
    }
    file_text_write_string(f, string(frames[| ds_list_size(frames)-1]));
    file_text_close(f);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the surface for the static segments has been destroyed, 
//recreate and ready the segments for redrawing onto it
if(!surface_exists(global.STATIC_SEGMENT_SURFACE))
{
    //If the suface was destroyed, recreate it and make all segments redraw themselves onto it once
    global.STATIC_SEGMENT_SURFACE = surface_create_log(room_width, room_height);
    show_debug_message("SURFACE ID: " + string(global.STATIC_SEGMENT_SURFACE));
    with(obj_segment) { visible = true; }
}
if(clearStaticSurf)
{
    show_debug_message("CLEARING STATIC SURF");
    surface_set_target(global.STATIC_SEGMENT_SURFACE);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
    clearStaticSurf = false;
    with(obj_segment) { visible = true; } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw surfaces to screen
surface_set_target(room_surf);
draw_clear_alpha(c_black, 0);
surface_reset_target();

if(global.bg == "random_starfield")
{
    draw_surface(bgSurf, 0, global.segmentSize*4);
}

if(!global.paused and global.active != noone)
{
    surface_set_target(room_surf);
    if(global.ghost &gt;= 0)  
    {
        draw_surface(global.ghostSurf, global.active.ghostX*global.segmentSize, global.active.ghostY*global.segmentSize); 
    }
    draw_surface(global.active.surf, global.active.x*global.segmentSize, global.active.y*global.segmentSize);
    surface_reset_target();
}

surface_set_target(room_surf);
draw_surface(global.clear_surf, 0, 0);
draw_surface(global.STATIC_SEGMENT_SURFACE, 0, 0);
if(global.grid) { draw_surface(grid_surf, 0, global.segmentSize*4); }
part_system_drawit(global.clear_part_system);
surface_reset_target();

//TODO: TEMP VARIABLE FOR CENTERING, RECALCULATE WITH UI AND MOVE OUT OF DRAW
//Main board outline and background
center_x_offset = (global.WINDOW_WIDTH - (global.segmentSize * global.BLOCKS_WIDE))/2;
outline_width = 5;
draw_set_color(c_black);
draw_set_alpha(0.9);
draw_rectangle(center_x_offset, Y_PADDING+(global.segmentSize*4), center_x_offset + (global.segmentSize*global.BLOCKS_WIDE), Y_PADDING + (global.segmentSize*(global.BLOCKS_TALL+4)), false);
draw_set_alpha(1);
draw_set_color(c_white);
draw_rectangle_width(center_x_offset, Y_PADDING+(global.segmentSize*4), center_x_offset + (global.segmentSize*global.BLOCKS_WIDE), Y_PADDING + (global.segmentSize*(global.BLOCKS_TALL+4)), true, 5, "outer");
draw_surface(room_surf, center_x_offset, Y_PADDING);



//GUI
right_x_offset = (center_x_offset + global.segmentSize*(global.BLOCKS_WIDE+1));
half_y = floor(global.WINDOW_HEIGHT/2);

draw_set_color(c_black);
draw_set_alpha(0.9);
//draw_rectangle(right_x_offset, Y_PADDING+(global.segmentSize*4), right_x_offset + (global.segmentSize*3), Y_PADDING+(global.segmentSize*13), false);
draw_rectangle(right_x_offset, Y_PADDING+(global.segmentSize*4), right_x_offset + (global.segmentSize*4), Y_PADDING+(global.segmentSize*7), false);
draw_rectangle(right_x_offset + outline_width, Y_PADDING+(global.segmentSize*7), right_x_offset + (global.segmentSize*4) + outline_width, Y_PADDING+(global.segmentSize*12), false);
draw_rectangle(right_x_offset, Y_PADDING+(global.segmentSize*13.5)-global.box_sm_height/2, right_x_offset + (global.segmentSize*4), Y_PADDING+(global.segmentSize*18), false);
draw_rectangle(right_x_offset, Y_PADDING+(global.segmentSize*18.5), right_x_offset + (global.segmentSize*4), Y_PADDING+(global.segmentSize*24), false);
draw_set_alpha(1);

draw_set_color(c_white);
draw_set_font(dos_font_md);
//draw_rectangle_width(right_x_offset, Y_PADDING+(global.segmentSize*4), right_x_offset + (global.segmentSize*3), Y_PADDING+(global.segmentSize*13), true, outline_width, "outer");
draw_rectangle_width_sides(right_x_offset, Y_PADDING+(global.segmentSize*4), right_x_offset + (global.segmentSize*4), Y_PADDING+(global.segmentSize*7), outline_width, "outer", array(true, true, false, true));
draw_line_width(right_x_offset - outline_width/2, Y_PADDING+(global.segmentSize*7), right_x_offset + (global.segmentSize*0.5), Y_PADDING+(global.segmentSize*7), outline_width);
draw_line_width(right_x_offset - outline_width/2 + (global.segmentSize*0.5), Y_PADDING+(global.segmentSize*7), right_x_offset - outline_width/2 + (global.segmentSize*0.5), Y_PADDING+(global.segmentSize*12), outline_width);
draw_line_width(right_x_offset + (global.segmentSize*4) + outline_width/2, Y_PADDING+(global.segmentSize*7), right_x_offset + (global.segmentSize*4) + outline_width/2, Y_PADDING+(global.segmentSize*12), outline_width);
draw_line_width(right_x_offset + (global.segmentSize*0.5) - outline_width, Y_PADDING+(global.segmentSize*12) + outline_width/2, right_x_offset + (global.segmentSize*4) + outline_width, Y_PADDING+(global.segmentSize*12) + outline_width/2, outline_width);

var _txt_scale = global.VISIBLE_HEIGHT/1080;
draw_set_font(dos_font_sm);
draw_text(right_x_offset+5,  Y_PADDING+(global.segmentSize*13.5), "HOLD");
draw_set_font(dos_font_md);
//Hold box outline
draw_rectangle_width(right_x_offset, Y_PADDING+(global.segmentSize*14), right_x_offset + (global.segmentSize*4), Y_PADDING+(global.segmentSize*17), true, outline_width, "outer");

//Upcoming and hold pieces 
if(!global.paused)
{
    var scale = floor(global.segmentSize / 10); //10 is the segmentSize of the minis, hardcoded because the picture are not dynamic
    var _w = scale*10*4;
    var _wDiff = (global.segmentSize*4)-_w;
    var _w_margin = _wDiff/2;
    var _h_margin = scale*10*0.5;
    var _h_mar_off = scale*10*5;
    var sm_scale = floor(scale*0.75);
    var sm_w = floor(_w*0.75);
    //var sm_wDiff = (global.segmentSize*4)-sm_w;
    //var sm_margin = sm_wDiff/2;
    var sm_margin = _w - sm_w;
    var sm_h_mar_off = sm_scale*10*4;
    
    var i = 0;
    var spr = -1;
    for(; i &lt; global.previewCount; i++)
    {
        if(global.rand_method == "Full")
        {
            spr = asset_get_index("spr_" + preview[i]);
        }
        else if(global.rand_method == "Bag")
        {
            spr = asset_get_index("spr_" + global.bag[| i]);
        }
        
        if(i == 0) 
        {
            draw_sprite_ext(spr, 0, right_x_offset+_w_margin, Y_PADDING+(global.segmentSize*4)+_h_margin, scale, scale, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(spr, 0, right_x_offset+sm_margin, Y_PADDING+(global.segmentSize*3)+_h_mar_off+(sm_h_mar_off*(i-1)), sm_scale, sm_scale, 0, c_white, 1);
        }
    }
    
    if(global.hold != "" &amp;&amp; global.hold != " ")
    {
        spr = asset_get_index("spr_" + global.hold);
        draw_sprite_ext(spr, 0, right_x_offset+_w_margin, Y_PADDING+(global.segmentSize*14)+_h_margin, scale, scale, 0, c_white, 1);
    }
    
}

//draw_set_font(new_large_font);
draw_set_font(dos_font_lg);
draw_text_transformed(right_x_offset+(global.segmentSize*0.175),  Y_PADDING+(global.segmentSize*19.125), "SCORE", _txt_scale, _txt_scale, 0);
draw_text_transformed(right_x_offset+(global.segmentSize*0.175),  Y_PADDING+(global.segmentSize*19.875), string(global.points), _txt_scale, _txt_scale, 0);
draw_text_transformed(right_x_offset+(global.segmentSize*0.175),  Y_PADDING+(global.segmentSize*20.875), "LEVEL", _txt_scale, _txt_scale, 0);
draw_text_transformed(right_x_offset+(global.segmentSize*0.175),  Y_PADDING+(global.segmentSize*21.625), string(global.level), _txt_scale, _txt_scale, 0);
draw_text_transformed(right_x_offset+(global.segmentSize*0.175),  Y_PADDING+(global.segmentSize*22.625), "TIME", _txt_scale, _txt_scale, 0);
draw_text_transformed(right_x_offset+(global.segmentSize*0.175),  Y_PADDING+(global.segmentSize*23.385), format_time(global.time), _txt_scale, _txt_scale, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare surfaces 
if(!surface_exists(room_surf)) 
{ 
    room_surf = surface_create_log(room_width+1, room_height); 
    surface_set_target(room_surf);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
} 
if(!surface_exists(global.clear_surf)) 
{ 
    global.clear_surf = surface_create_log(room_width, room_height); 
    surface_set_target(global.clear_surf);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
} 
/* //IN prepareGhostSurface() 
if(global.ghost and !surface_exists(global.ghostSurf)) 
{ 
    global.ghostSurf = surface_create(4*global.segmentSize, 4*global.segmentSize);
    surface_set_target(global.ghostSurf);
    draw_clear_alpha(c_black, 0); 
    surface_reset_target();
} 
*/
if(global.ghost &gt;= 0 and !surface_exists(global.ghostSurf)) 
    { with(global.active) { prepareGhostSurface(); } }

if(global.grid and !surface_exists(grid_surf))
{
    //grid_surf = surface_create(room_width+1, room_height); 
    var disp_w = global.BLOCKS_WIDE*global.segmentSize;
    var disp_h = global.BLOCKS_TALL*global.segmentSize;
    grid_surf = surface_create_log(disp_w+1, disp_h+1);
    surface_set_target(grid_surf);
    draw_clear_alpha(c_black, 0);
    //draw_set_color(c_black);
    draw_set_color(c_white);
    //VERTICAL
    for(var _x = 0; _x &lt;= disp_w; _x += global.segmentSize)
        { draw_line(_x, 0, _x, disp_h); }
    //HORIZONTAL
    for(var _y = 0; _y &lt;= disp_h; _y += global.segmentSize)
        { draw_line(0, _y, disp_h, _y); }
    surface_reset_target();
}

if(!surface_exists(global.STATIC_SEGMENT_SURFACE))
{
    show_debug_message("REBUILDING");
    //If the suface was destroyed, recreate it and make all segments redraw themselves onto it once
    global.STATIC_SEGMENT_SURFACE = surface_create_log(room_width, room_height);
    with(obj_segment) { visible = true; }
}


if(global.bg == "random_starfield")
{
    if(!surface_exists(bgSurf))
    {
        bgSurf = surface_create(global.VISIBLE_WIDTH, global.VISIBLE_HEIGHT);
        surface_set_target(bgSurf);
        draw_clear(c_black);
        draw_set_color(c_white);
        var _min = global.VISIBLE_WIDTH * global.VISIBLE_HEIGHT / 500;
        var _max = global.VISIBLE_WIDTH * global.VISIBLE_HEIGHT / 100;
        var count = irandom_range(_min, _max);
        var r = global.VISIBLE_HEIGHT/800;
        for(var i = 0; i &lt; count; i++)
        {
            var _x = irandom(global.VISIBLE_WIDTH-1);
            var _y = irandom(global.VISIBLE_HEIGHT-1);
            draw_circle(_x, _y, r, false);
        }
        surface_reset_target();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
